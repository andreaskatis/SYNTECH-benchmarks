const K = 2.0;

type env_obstacle = enum {CLEAR, BLOCKED};
type env_sideSensor = enum {TOO_CLOSE, TOO_FAR, CENTERED, PS_TOO_FAR, PS_TOO_CLOSE, PS_CENTERED};
type env_rearSideSensor = enum {IS_TOO_CLOSE, IS_TOO_FAR, IS_CENTERED, IS_PS_TOO_FAR, IS_PS_TOO_CLOSE, IS_PS_CENTERED};

type sys_steeringMot = enum {MAX_RIGHT, MAX_LEFT, CENTER, ALIGN_RIGHT, ALIGN_LEFT};
type sys_sensorMot = enum {FWD, BWD};
type sys_engineMot = enum {eng_FWD, eng_BWD, STOP, PARKING_BWD, PARKING_FWD, PREPARE_PERPENDICULAR_BWD,PERPENDICULAR_BWD, BYPASS_FWD};
type sys_carStatus = enum {	SEEKING_FOR_PS, MEASURE_PARKING, BYPASSING, PREPARE_FOR_PARALLEL_PARKING, PARALLEL, PERPENDICULAR, PARKED};

--type sys_spec_counter = subrange [0,14] of int;
--type sys_spec_obstacleCounter = subrange [0,6] of int;

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;


node AspectLTLAspect(obstacle : env_obstacle; sideSensor : env_sideSensor; rearSideSensor : env_rearSideSensor; steeringMot : sys_steeringMot; sensorMot : sys_sensorMot; engineMot : sys_engineMot; carStatus : sys_carStatus; spec_counter : real; spec_obstacleCounter : real) returns ();
var
  responded1, responded2, responded3, responded4 : bool;
  counter_gf1, counter_r1, counter_r2, counter_r3, counter_r4 : real;
  counterLimit, phaseNone, firstPhase, secondPhase, thirdPhase, suitableParallelPS, suitablePerpendicularPS, preparingParallelSteps : real;
  weGotSideSensorSeekingValues, weGotRearSideSensorSeekingValues, weGotSideSensorMeasuringValues, weGotRearSideSensorMeasuringValues, Stop, capablePerpendicular, keepCarStatus, keepCounterValue, movingFwd, movingBwd, rearTooFar, rearTooClose, rearCentered, frontCentered, frontTooFar, frontTooClose, movingNextToObstacle : bool;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30, ok31, ok32, ok33, ok34, ok35, ok36, ok37, ok38, ok39, ok40, ok41, ok42, ok43, ok44, ok45, ok46, ok47, ok48, ok49, ok50, ok51, ok52, ok53, ok54, ok55, ok56 : bool;

let
  assert (spec_counter >= 0.0) and (spec_counter <= 14.0);
  assert (spec_obstacleCounter >= 0.0) and (spec_obstacleCounter <= 6.0);
  counterLimit = 14.0;

  phaseNone = 0.0;

  firstPhase = 1.0;

  secondPhase = 2.0;

  thirdPhase = 3.0;

  weGotSideSensorSeekingValues = (sideSensor = TOO_CLOSE or sideSensor = TOO_FAR or sideSensor = CENTERED);

  weGotRearSideSensorSeekingValues = (rearSideSensor = IS_TOO_CLOSE or rearSideSensor = IS_TOO_FAR or rearSideSensor = IS_CENTERED);

  weGotSideSensorMeasuringValues = (sideSensor = PS_TOO_CLOSE or sideSensor = PS_TOO_FAR or sideSensor = PS_CENTERED);

  weGotRearSideSensorMeasuringValues = (rearSideSensor = IS_PS_TOO_CLOSE or rearSideSensor = IS_PS_TOO_FAR or rearSideSensor = IS_PS_CENTERED);

  Stop = (engineMot = STOP);

  suitableParallelPS = 6.0;

  suitablePerpendicularPS = 4.0;

  preparingParallelSteps = 2.0;

  capablePerpendicular = (spec_counter >= suitablePerpendicularPS);

  keepCarStatus = (pre(carStatus) = carStatus);

  keepCounterValue = (pre(spec_counter) = spec_counter);

  movingFwd = (engineMot = eng_FWD or engineMot = PARKING_FWD or engineMot = BYPASS_FWD);

  movingBwd = (engineMot = eng_BWD or
          engineMot = PARKING_BWD or
          engineMot = PREPARE_PERPENDICULAR_BWD or
          engineMot = PERPENDICULAR_BWD
  );

  rearTooFar =   (rearSideSensor = IS_TOO_FAR or rearSideSensor = IS_PS_TOO_FAR);

  rearTooClose = (rearSideSensor = IS_TOO_CLOSE or rearSideSensor = IS_PS_TOO_CLOSE);

  rearCentered = (rearSideSensor = IS_CENTERED or rearSideSensor = IS_PS_CENTERED);

  frontCentered = (sideSensor = CENTERED or sideSensor = PS_CENTERED);

  frontTooFar =   (sideSensor = TOO_FAR or sideSensor = PS_TOO_FAR);

  frontTooClose = (sideSensor = TOO_CLOSE or sideSensor = PS_TOO_CLOSE);

  movingNextToObstacle = (carStatus = BYPASSING and spec_counter = 7.0);

  ok1 = Initially((carStatus = SEEKING_FOR_PS) and (sensorMot = FWD) and (spec_counter = 0.0));
  ok2 = (obstacle = BLOCKED) => Stop;

  ok3 = ((obstacle = BLOCKED) and (not ((carStatus = SEEKING_FOR_PS) or (carStatus = MEASURE_PARKING) or ((carStatus = BYPASSING) and spec_counter = 10.0) or ((carStatus = PERPENDICULAR) and spec_counter = thirdPhase)))) => (keepCarStatus and keepCounterValue);

  ok4 = (((carStatus <> BYPASSING) and pre(obstacle = CLEAR) and (obstacle = BLOCKED)) => spec_obstacleCounter = 0.0);

  ok5 = (((obstacle = BLOCKED) and (carStatus <> BYPASSING) and pre((sensorMot = BWD) and (not movingFwd))) => sensorMot = BWD);

  ok6 = movingBwd => (sensorMot = BWD);
  ok7 = movingFwd => (sensorMot = FWD);

  counter_gf1 = 0.0 -> (if (carStatus = PARKED) then 0.0 else pre(counter_gf1) + 1.0);
  ok8 = counter_gf1 < K;

  ok9 = (carStatus = PARKED) => Stop and keepCarStatus and (steeringMot = CENTER);

  --  wall alignment

  ok10 = (carStatus = SEEKING_FOR_PS) => (((steeringMot = ALIGN_RIGHT) or (steeringMot = CENTER) or (steeringMot =  ALIGN_LEFT)) and ((engineMot = eng_FWD) or (engineMot = STOP)) and (spec_counter = 0.0));

  ok11 = ((carStatus = SEEKING_FOR_PS) or (carStatus = PREPARE_FOR_PARALLEL_PARKING) or (carStatus = MEASURE_PARKING) or movingNextToObstacle) => ((((sideSensor = TOO_CLOSE) or (sideSensor = PS_TOO_CLOSE)) and steeringMot = ALIGN_LEFT) or (((sideSensor = TOO_FAR) or (sideSensor = PS_TOO_FAR)) and steeringMot = ALIGN_RIGHT) or (((sideSensor = CENTERED) or (sideSensor = PS_CENTERED)) and steeringMot = CENTER));

  ok12 = ((carStatus = SEEKING_FOR_PS) and weGotSideSensorSeekingValues and (obstacle = CLEAR)) => keepCarStatus;

  ok13 = (pre((carStatus = SEEKING_FOR_PS) and weGotSideSensorMeasuringValues and (obstacle = CLEAR)) => (pre(engineMot = STOP) and (carStatus = MEASURE_PARKING) and (spec_counter = 1.0)));

  --assert respondsTo((obstacle = BLOCKED) and (carStatus <> MEASURE_PARKING) and (carStatus <> SEEKING_FOR_PS), (obstacle = CLEAR));

  responded1 = true -> (pre((obstacle = CLEAR) or responded1 and (not ((obstacle = BLOCKED) and (carStatus <> MEASURE_PARKING) and (carStatus <> SEEKING_FOR_PS)))));

  counter_r1 = 0.0 -> if (responded1) then 0.0 else pre(counter_r1) + 1.0;
  assert counter_r1 < K;

  -- measure parking spaces specs

  ok14 = (carStatus = MEASURE_PARKING) => (((steeringMot = ALIGN_RIGHT) or (steeringMot = CENTER) or (steeringMot = ALIGN_LEFT)) and ((engineMot = eng_FWD) or (engineMot = STOP)) and (spec_counter <= suitableParallelPS));

  ok15 = ((carStatus = MEASURE_PARKING) and (obstacle = CLEAR) and weGotSideSensorMeasuringValues) => engineMot <> STOP;

  ok16 = ((carStatus = MEASURE_PARKING) and weGotSideSensorMeasuringValues and (spec_counter < suitableParallelPS) and (obstacle = CLEAR)) => keepCarStatus;

  ok17 = spec_counter <= counterLimit;

  ok18 = (pre((carStatus = MEASURE_PARKING) and weGotSideSensorSeekingValues and (obstacle = CLEAR) and (spec_counter < suitableParallelPS) and (not capablePerpendicular)) => (carStatus = SEEKING_FOR_PS));

  ok19 = (pre((carStatus = MEASURE_PARKING) and weGotSideSensorSeekingValues and (obstacle = CLEAR) and (spec_counter < suitableParallelPS) and capablePerpendicular) => ((carStatus = PERPENDICULAR) and (spec_counter = firstPhase) and pre(sensorMot = BWD and Stop)));

  ok20 = (pre((carStatus = MEASURE_PARKING) and  weGotSideSensorMeasuringValues and (obstacle = CLEAR) and (engineMot = eng_FWD) and (spec_counter) < suitableParallelPS) => (spec_counter = pre(spec_counter) + 1.0));

  ok21 = (pre((carStatus = MEASURE_PARKING) and (spec_counter = suitableParallelPS) and (obstacle = CLEAR)) => (carStatus = PREPARE_FOR_PARALLEL_PARKING) and (spec_counter = 0.0));

  ok22 = respondsTo((carStatus = MEASURE_PARKING), ((carStatus = PREPARE_FOR_PARALLEL_PARKING) or (carStatus = PERPENDICULAR)));

  --assert respondsTo((obstacle = CLEAR and engineMot = eng_FWD), ((carStatus = PREPARE_FOR_PARALLEL_PARKING) or (carStatus = PERPENDICULAR)));

  responded2 = true -> (pre(((carStatus = PREPARE_FOR_PARALLEL_PARKING) or (carStatus = PERPENDICULAR)) or responded2 and (not (obstacle = CLEAR and engineMot = eng_FWD))));

  counter_r2 = 0.0 -> if (responded2) then 0.0 else pre(counter_r2) + 1.0;
  assert counter_r2 < K;


  -- Preparing for parallel parking

  ok23 = (carStatus = PREPARE_FOR_PARALLEL_PARKING) => (((steeringMot = ALIGN_RIGHT) or (steeringMot = CENTER) or (steeringMot = ALIGN_LEFT)) and ((engineMot = eng_FWD) or (engineMot = STOP)));

  ok24 = (pre(carStatus = PREPARE_FOR_PARALLEL_PARKING and obstacle = CLEAR and spec_counter < preparingParallelSteps)) => ((spec_counter = pre(spec_counter) + 1.0) and engineMot = eng_FWD);

  ok25 = (carStatus = PREPARE_FOR_PARALLEL_PARKING and spec_counter < preparingParallelSteps) => keepCarStatus;

  ok26 = (pre(carStatus = PREPARE_FOR_PARALLEL_PARKING and spec_counter = preparingParallelSteps and obstacle = CLEAR) => (pre(Stop) and (carStatus = PARALLEL) and (spec_counter = firstPhase) and pre(sensorMot = BWD)));

  ok27 = respondsTo((carStatus = PREPARE_FOR_PARALLEL_PARKING), (spec_counter = preparingParallelSteps));

  --assert respondsTo(((obstacle=CLEAR and carStatus=PREPARE_FOR_PARALLEL_PARKING) => (engineMot= eng_FWD)),(carStatus=PARALLEL));

  responded3 = true -> (pre((carStatus=PARALLEL) or responded3 and (not ((obstacle=CLEAR and carStatus=PREPARE_FOR_PARALLEL_PARKING) => (engineMot= eng_FWD)))));

  counter_r3 = 0.0 -> if (responded3) then 0.0 else pre(counter_r3) + 1.0;
  assert counter_r3 < K;


  -- parking parallel

  ok28 = (carStatus = PARALLEL) => (((steeringMot = MAX_RIGHT) or (steeringMot = CENTER) or (steeringMot = MAX_LEFT)) and ((engineMot = PARKING_BWD) or (engineMot = STOP)));

  ok29 = (pre(carStatus = PARALLEL and spec_counter = firstPhase and obstacle = CLEAR) => (pre(engineMot = PARKING_BWD and keepCarStatus and steeringMot = MAX_RIGHT) and spec_counter = secondPhase));

  ok30 = (pre(carStatus = PARALLEL and spec_counter = secondPhase and obstacle = CLEAR) => (pre(engineMot = PARKING_BWD) and (carStatus = PARKED) and pre(steeringMot = MAX_LEFT)));

  ok31 = (carStatus = PERPENDICULAR) => (((steeringMot = MAX_RIGHT) or (steeringMot = CENTER) or (steeringMot = MAX_LEFT)) and ((engineMot = PARKING_FWD) or (engineMot = STOP) or (engineMot = PREPARE_PERPENDICULAR_BWD) or (engineMot = PERPENDICULAR_BWD)));

  ok32 = (pre(carStatus = PERPENDICULAR and spec_counter = firstPhase and obstacle = CLEAR) => (pre(engineMot = PREPARE_PERPENDICULAR_BWD and keepCarStatus and steeringMot = CENTER) and (spec_counter = secondPhase)));

  ok33 = (pre(carStatus = PERPENDICULAR and spec_counter = secondPhase and obstacle = CLEAR) => (pre(engineMot = PARKING_FWD and keepCarStatus and steeringMot = MAX_LEFT) and (spec_counter = thirdPhase)));

  ok34 = (pre(carStatus = PERPENDICULAR and spec_counter = thirdPhase and obstacle = CLEAR) => (pre(engineMot = PERPENDICULAR_BWD) and (carStatus = PARKED) and pre(steeringMot = MAX_RIGHT)));

  -- bypassing

  ok35 = ((obstacle = BLOCKED and carStatus = BYPASSING and ((spec_counter = 1.0) or (spec_counter = 2.0) or (spec_counter = 11.0)) and pre(sensorMot = BWD) and (not movingFwd)) => sensorMot = BWD);

  ok36 = (pre(((carStatus = SEEKING_FOR_PS) or (carStatus = MEASURE_PARKING)) and (spec_obstacleCounter < 2.0 and obstacle = BLOCKED)) => (pre(Stop) and (spec_obstacleCounter = pre(spec_obstacleCounter) + 1.0) and pre(keepCarStatus and keepCounterValue)));

  ok37 = (pre(((carStatus = SEEKING_FOR_PS) or (carStatus = MEASURE_PARKING)) and spec_obstacleCounter = 2.0 and obstacle = BLOCKED and (true -> pre(obstacle = BLOCKED))) => (pre(Stop) and (carStatus = BYPASSING) and (spec_counter = 0.0)));

  ok38 = (carStatus = BYPASSING and spec_counter < 10.0) => (keepCarStatus);

  ok39 = (carStatus = BYPASSING and spec_counter = 0.0) => (Stop and sensorMot = BWD);

  ok40 = (pre(carStatus = BYPASSING and spec_counter = 0.0 and obstacle = CLEAR) => spec_counter = 1.0);

  ok41 = (pre(carStatus = BYPASSING and spec_counter = 1.0 and obstacle = CLEAR) => pre(engineMot = eng_BWD and steeringMot = CENTER) and spec_counter = 2.0);

  ok42 = (pre(carStatus = BYPASSING and spec_counter = 2.0 and obstacle = CLEAR) => pre(engineMot = eng_BWD and steeringMot = CENTER) and spec_counter = 3.0);

  ok43 = (carStatus = BYPASSING and spec_counter = 3.0) => (Stop and sensorMot = FWD);

  ok44 = (pre(carStatus = BYPASSING and spec_counter = 3.0 and obstacle = CLEAR) => (spec_counter = 4.0));

  ok45 = (pre(carStatus = BYPASSING and spec_counter = 4.0 and obstacle = CLEAR) => pre(engineMot = BYPASS_FWD and steeringMot = MAX_LEFT) and (spec_counter = 5.0));

  ok46 = (pre(carStatus = BYPASSING and spec_counter = 5.0 and obstacle = CLEAR and sideSensor = TOO_CLOSE) => pre(engineMot = eng_FWD and steeringMot = CENTER) and (spec_counter = 6.0));

  ok47 = (pre(carStatus = BYPASSING and spec_counter = 5.0 and obstacle = CLEAR and sideSensor <> TOO_CLOSE) => pre(Stop and steeringMot = CENTER) and (spec_counter = 6.0));

  ok48 = (pre(carStatus = BYPASSING and spec_counter = 6.0 and obstacle = CLEAR) => pre(engineMot = PARKING_FWD and steeringMot = MAX_RIGHT) and (spec_counter = 7.0 and spec_obstacleCounter = 0.0));

  ok49 = (pre(movingNextToObstacle and (weGotSideSensorSeekingValues or weGotRearSideSensorSeekingValues) and obstacle = CLEAR and spec_obstacleCounter < 3.0) => pre(keepCounterValue) and spec_obstacleCounter = 0.0);

  ok50 = (pre(movingNextToObstacle and weGotSideSensorMeasuringValues and weGotRearSideSensorMeasuringValues and obstacle = CLEAR and spec_obstacleCounter < 6.0) => pre(keepCounterValue) and spec_obstacleCounter = pre(spec_obstacleCounter) + 1.0);

  ok51 = (pre(movingNextToObstacle and obstacle = CLEAR and spec_obstacleCounter = 6.0) => pre(Stop and sensorMot = BWD) and (spec_counter = 8.0));

  ok52 = (pre(carStatus = BYPASSING and spec_counter = 8.0 and obstacle = CLEAR) => pre(engineMot = PARKING_BWD and steeringMot = MAX_RIGHT) and (spec_counter = 9.0));

  ok53 = (pre(carStatus = BYPASSING and spec_counter = 9.0 and obstacle = CLEAR) => pre(engineMot = PARKING_BWD and steeringMot =MAX_LEFT) and (spec_counter = 10.0));

  ok54 = (pre(carStatus = BYPASSING and spec_counter = 10.0) => pre(sensorMot = FWD and Stop) and (carStatus = SEEKING_FOR_PS));

  ok55 = (pre(carStatus = BYPASSING) => ((carStatus = SEEKING_FOR_PS) or (carStatus = BYPASSING)));

  ok56 = respondsTo((carStatus = BYPASSING), (carStatus = SEEKING_FOR_PS));

  --assert respondsTo((carStatus = BYPASSING and engineMot = eng_FWD), (carStatus = SEEKING_FOR_PS));

  responded4 = true -> (pre((carStatus = SEEKING_FOR_PS) or responded4 and (not (carStatus = BYPASSING and engineMot = eng_FWD))));

  counter_r4 = 0.0 -> if (responded4) then 0.0 else pre(counter_r4) + 1.0;
  assert counter_r4 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30 and ok31 and ok32 and ok33 and ok34 and ok35 and ok36 and ok37 and ok38 and ok39 and ok40 and ok41 and ok42 and ok43 and ok44 and ok45 and ok46 and ok47 and ok48 and ok49 and ok50 and ok51 and ok52 and ok53 and ok54 and ok55 and ok56;
  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;
  --%PROPERTY ok23;
  --%PROPERTY ok24;
  --%PROPERTY ok25;
  --%PROPERTY ok26;
  --%PROPERTY ok27;
  --%PROPERTY ok28;
  --%PROPERTY ok29;
  --%PROPERTY ok30;
  --%PROPERTY ok31;
  --%PROPERTY ok32;
  --%PROPERTY ok33;
  --%PROPERTY ok34;
  --%PROPERTY ok35;
  --%PROPERTY ok36;
  --%PROPERTY ok37;
  --%PROPERTY ok38;
  --%PROPERTY ok39;
  --%PROPERTY ok40;
  --%PROPERTY ok41;
  --%PROPERTY ok42;
  --%PROPERTY ok43;
  --%PROPERTY ok44;
  --%PROPERTY ok45;
  --%PROPERTY ok46;
  --%PROPERTY ok47;
  --%PROPERTY ok48;
  --%PROPERTY ok49;
  --%PROPERTY ok50;
  --%PROPERTY ok51;
  --%PROPERTY ok52;
  --%PROPERTY ok53;
  --%PROPERTY ok54;
  --%PROPERTY ok55;
  --%PROPERTY ok56;

  --%REALIZABLE obstacle, sideSensor, rearSideSensor;
tel;
