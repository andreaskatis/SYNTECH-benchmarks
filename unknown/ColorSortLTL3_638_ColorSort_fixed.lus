const K = 1.0;

type env_color = enum {RED, GREEN, BLUE, BLACK, YELLOW, WHITE};
type env_ack_ver = enum {MOVE, SLEEP};

type env_speedButton = enum {PRESS, RELEASE};

type sys_botMot = enum {SEEK, STOP, RETURN};
type sys_motSpeed = enum {LEVEL1, LEVEL2, LEVEL3};
type sys_spec_state = enum {S0, S1, S2};

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> pre(response or responded and (not trigger));
  ok = counter_gf < K;
tel;

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node ColorSort(color : env_color; detect : env_color; ack_ver, ack_hor, ack_bot : env_ack_ver; speedButton : env_speedButton; verMot, horMot : env_ack_ver; botMot : sys_botMot; motSpeed : sys_motSpeed; spec_currentColor : env_color; spec_state_1, spec_state_2 : sys_spec_state; spec_speedButtonValidPressed : bool) returns ();
var
  respondedg1, responded1,responded2,responded3 : bool;
  counter_gr1, counter_r1, counter_r2, counter_r3 : real;
  counter_gf1, counter_gf2 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14,
  --ok15,
   ok16 : bool;
  spec_allsleep, spec_nonemove : bool;
let
  spec_allsleep = (verMot = SLEEP and horMot = SLEEP and botMot = STOP);
  spec_nonemove = (ack_ver = SLEEP and ack_hor = SLEEP and ack_bot = SLEEP);

  ok1 = verMot = MOVE => (botMot = STOP and horMot = SLEEP);
  ok2 = horMot = MOVE => (botMot = STOP and verMot = SLEEP);
  ok3 = botMot <> STOP => (verMot = SLEEP and horMot = SLEEP);
  ok4 = pre(verMot = SLEEP) => (spec_currentColor = pre(spec_currentColor));

  ok5 = Initially(motSpeed = LEVEL1);

  -- this is how the robot works

  -- this did not have a pre or next operation at all. Probably a mistake in the spectra file.
  ok6 = pre(color = BLACK and spec_nonemove and spec_allsleep) => spec_allsleep;

  --speed button

  ok7 = ((speedButton = PRESS and pre(speedButton = RELEASE)) => spec_speedButtonValidPressed);
  ok8 = (spec_speedButtonValidPressed => (speedButton = PRESS and pre(speedButton = RELEASE)));

  ok9 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL2;

  ok10 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL2)) => motSpeed = LEVEL3;

  ok11 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL3)) => motSpeed = LEVEL1;

  ok12 = ((not spec_speedButtonValidPressed) and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL1;

  ok13 = ((not spec_speedButtonValidPressed and pre(motSpeed = LEVEL2))) => motSpeed = LEVEL2;

  ok14 = ((not spec_speedButtonValidPressed and pre(motSpeed = LEVEL3))) => motSpeed = LEVEL3;

  respondedg1 = true -> pre((detect = spec_currentColor and horMot = MOVE) or respondedg1 and (not (color <> BLACK)));
  counter_gr1 = 0.0 -> if (respondedg1) then 0.0 else pre(counter_gr1) + 1.0;

  --ok15 = counter_gr1 < K;

  counter_gf1 = 0.0 -> if (horMot = MOVE) then 0.0 else pre(counter_gf1) + 1.0;
  ok16 = counter_gf1 < K;

  --assert respondsTo(ack_ver = MOVE, (ack_ver = SLEEP));
  --assert respondsTo(ack_hor = MOVE, (ack_hor = SLEEP));
  --assert respondsTo(ack_bot = MOVE, (ack_bot = SLEEP));

  responded1 = true -> (pre((ack_ver = SLEEP) or responded1 and (not (ack_ver = MOVE))));

  responded2 = true -> (pre((ack_hor = SLEEP) or responded2 and (not (ack_hor = MOVE))));

  responded3 = true -> (pre((ack_bot = SLEEP) or responded3 and (not (ack_bot = MOVE))));

  counter_r1 = 0.0 -> if (responded1) then 0.0 else pre(counter_r1) + 1.0;
  counter_r2 = 0.0 -> if (responded2) then 0.0 else pre(counter_r2) + 1.0;
  counter_r3 = 0.0 -> if (responded3) then 0.0 else pre(counter_r3) + 1.0;

  assert counter_r1 < K;
  assert counter_r2 < K;
  assert counter_r3 < K;

  counter_gf2 = 0.0 -> if (color <> BLACK) then 0.0 else pre(counter_gf2) + 1.0;
  assert counter_gf2 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --PROPERTY ok15;
  --%PROPERTY ok16;

  --%REALIZABLE color, detect, ack_ver, ack_hor, ack_bot, speedButton;
tel;
