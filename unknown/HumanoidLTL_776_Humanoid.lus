const K = 2.0;
type env_Obstacle = enum {CLEAR, BLOCKED};
type env_Noise = enum {QUIET, NOISE};
type env_Heading = enum {N, EA, SO, W};
type env_Button = enum {FREE, PRESSED};

type sys_LeftMotor = enum {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN_LEFT, CALIB_TURN_RIGHT, CALIB_FWD_LEFT, CALIB_FWD_RIGHT};

--enums cant share same values
--type sys_RightMotor = enum {RM_FWD, RM_BWD, RM_STOP, RM_TURN_FWD, RM_TURN_BWD, RM_CALIB_TURN, RM_CALIB_FWD};

type sys_HeadMotor = enum {HM_FWD, HM_BWD, HM_STOP};
type sys_nextMoveMode = enum {nMM_FWD, nMM_BWD, nMM_TURN_LEFT, nMM_TURN_RIGHT};
type sys_specState = enum {Q0, Q1, Q2, Q3};
type sys_turnState = enum {T0, T1, T2, T3};

-- in JKIND (lustre?) enums can't share the same values. as such, next_head is of type sys_Heading here.
--type sys_next_head = enum {nh_N, nh_NW, nh_W, nh_SW, nh_SO, nh_SE, nh_EA, nh_NE};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Humanoid(Obstacle : env_Obstacle; Noise : env_Noise; Heading : env_Heading; Button : env_Button; LeftMotor : sys_LeftMotor; RightMotor : sys_LeftMotor; HeadMotor : sys_HeadMotor; nextMoveMode : sys_nextMoveMode; specState : sys_specState; turnState : sys_turnState; nextHead : env_Heading) returns ();
var
  responded1, responded2, responded3 : bool;
  counter_r1, counter_r2, counter_r3, counter_gf1 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30, ok31, ok32, ok33, ok34, ok35, ok36, ok37, ok38, ok39, ok40, ok41, ok42, ok43, ok44 : bool;
let

  --inital state
  ok1 = Initially(specState = Q0);
  ok2 = Initially(turnState = T0);
  ok3 = Initially(nextHead = SO);
  ok4 = Initially(nextMoveMode = nMM_FWD);

  assert Initially(Obstacle = CLEAR);

  --goals
  counter_gf1 = 0.0 -> if (nextMoveMode = nMM_FWD) then 0.0 else pre(counter_gf1) + 1.0;
  ok5 = counter_gf1 < K;

  --main restriction - do not run into walls
  ok6 = (Obstacle = BLOCKED) => (not (nextMoveMode = nMM_FWD));


  -- motors - control
  ok7 = ((pre(nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD) => (LeftMotor = FWD and RightMotor = BWD));
  ok8 = ((LeftMotor = FWD and RightMotor = BWD) => (pre(nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD));
  ok9 = ((pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => (LeftMotor = BWD and RightMotor = FWD));
  ok10 = ((LeftMotor = BWD and RightMotor = FWD) => (pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD));
  ok11 = (nextMoveMode = nMM_BWD => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_BWD)));
  ok12 = (pre(nextMoveMode = nMM_BWD) => (nextMoveMode = nMM_FWD or nextMoveMode = nMM_BWD));
  ok13 = (nextMoveMode = nMM_TURN_RIGHT) => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_TURN_RIGHT));
  ok14 = (nextMoveMode = nMM_TURN_LEFT) => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_TURN_LEFT));

  --q - automaton
  ok15 = (pre(specState = Q0 and nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => specState = Q1;
  ok16 = (pre(specState = Q1 and nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD) => specState = Q2;
  ok17 = (not (pre(specState = Q2 and nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD));
  ok18 = (pre(specState = Q1) and nextMoveMode = nMM_BWD) => specState = Q1;
  ok19 = (pre(specState = Q2) and nextMoveMode = nMM_FWD) => specState = Q2;
  ok20 = (pre(nextMoveMode = nMM_TURN_LEFT or nextMoveMode = nMM_TURN_RIGHT) => specState = Q0);

  --compass - handling
  ok21 = (pre(Button = PRESSED) => nextHead = Heading);
  ok22 = (pre(Button = FREE) => nextHead = pre(nextHead));


  --trigger to start looking for saved direction
  ok23 = respondsTo((Noise = NOISE), (Heading = nextHead));

  --don't go the long path
  ok24 = (((nextHead = N and Heading = EA) or (nextHead = EA and Heading = SO) or (nextHead = SO and Heading = W) or (nextHead = W and Heading = N)) and (turnState = T0)) => nextMoveMode <> nMM_TURN_RIGHT;

  ok25 = (((nextHead = EA and Heading = N) or (nextHead = SO and Heading = EA) or (nextHead = W and Heading = SO) or (nextHead = N and Heading = W)) and (turnState = T0)) => nextMoveMode <> nMM_TURN_LEFT;

  --turning - automaton
  ok26 = (turnState = T0 => pre(turnState = T0 or turnState = T3));
  ok27 = (pre(turnState = T0 and (not (nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT))) => turnState = T0);
  ok28 = (pre((nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT) and (true -> pre(nextMoveMode = nMM_FWD)) and turnState = T0) => turnState = T1);
  ok29 = (pre(turnState = T1) => (turnState = T2 and pre(nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT)));
  ok30 = (pre(turnState = T2 and (nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT)) => turnState = T1);
  ok31 = (pre(turnState = T2 and nextMoveMode = nMM_FWD) => turnState = T3);
  ok32 = (pre(turnState = T3) => turnState = T0);


  --movement - turning
  ok33 = ((pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_RIGHT)) => (LeftMotor = CALIB_TURN_RIGHT and RightMotor = CALIB_TURN_RIGHT));
  ok34 = ((LeftMotor = CALIB_TURN_RIGHT and RightMotor = CALIB_TURN_RIGHT) => (pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_RIGHT)));

  ok35 = ((pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_LEFT)) => (LeftMotor = CALIB_TURN_LEFT and RightMotor = CALIB_TURN_LEFT));
  ok36 = ((LeftMotor = CALIB_TURN_LEFT and RightMotor = CALIB_TURN_LEFT) => (pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_LEFT)));

  ok37 = ((turnState = T2) => pre(LeftMotor = FWD and RightMotor = TURN_FWD));
  ok38 = (pre(LeftMotor = FWD and RightMotor = TURN_FWD) => (turnState = T2));

  ok39 = ((turnState = T2) => (LeftMotor = BWD and RightMotor = TURN_BWD));
  ok40 = ((LeftMotor = BWD and RightMotor = TURN_BWD) => (turnState = T2));

  ok41 = ((pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_RIGHT))))) => pre(LeftMotor = CALIB_FWD_RIGHT and RightMotor = CALIB_FWD_RIGHT));
  ok42 = (pre(LeftMotor = CALIB_FWD_RIGHT and RightMotor = CALIB_FWD_RIGHT) => (pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_RIGHT)))));

  ok43 = ((pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_LEFT)))) => pre(LeftMotor = CALIB_FWD_LEFT and RightMotor = CALIB_FWD_LEFT));
  ok44 = (pre(LeftMotor = CALIB_FWD_LEFT and RightMotor = CALIB_FWD_LEFT) => (pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_LEFT)))));


  --environment - assumptions
  assert (pre(true -> pre(nextMoveMode = nMM_FWD)) and pre(Obstacle = BLOCKED)) => Obstacle = BLOCKED;
  assert (pre(true -> pre(nextMoveMode = nMM_BWD)) and pre(Obstacle = CLEAR)) => Obstacle <> BLOCKED;
  --assert respondsTo((turnState = T1), (pre(Obstacle = CLEAR) and (Obstacle = CLEAR)));

  responded1 = true -> (pre((true -> (pre(Obstacle = CLEAR) and (Obstacle = CLEAR))) or responded1 and (not (turnState = T1))));

  counter_r1 = 0.0 -> if (responded1) then 0.0 else pre(counter_r1) + 1.0;

  assert counter_r1 < K;

  assert pre(turnState = T2 and Obstacle = CLEAR) => Obstacle = CLEAR;
  --assert respondsTo((nextMoveMode = nMM_TURN_RIGHT), ((Heading = nextHead) or (nextMoveMode <> nMM_TURN_RIGHT)));

  responded2 = true -> (pre((Heading = nextHead or nextMoveMode <> nMM_TURN_RIGHT) or responded2 and (not (nextMoveMode = nMM_TURN_RIGHT))));

  counter_r2 = 0.0 -> if (responded2) then 0.0 else pre(counter_r2) + 1.0;

  assert counter_r2 < K;

  --assert respondsTo((nextMoveMode = nMM_TURN_LEFT), (Heading = nextHead or nextMoveMode <> nMM_TURN_LEFT));

  responded3 = true -> (pre((Heading = nextHead or nextMoveMode <> nMM_TURN_LEFT) or responded3 and (not (nextMoveMode = nMM_TURN_LEFT))));

  counter_r3 = 0.0 -> if (responded3) then 0.0 else pre(counter_r3) + 1.0;

  assert counter_r3 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30 and ok31 and ok32 and ok33 and ok34 and ok35 and ok36;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;
  --%PROPERTY ok23;
  --%PROPERTY ok24;
  --%PROPERTY ok25;
  --%PROPERTY ok26;
  --%PROPERTY ok27;
  --%PROPERTY ok28;
  --%PROPERTY ok29;
  --%PROPERTY ok30;
  --%PROPERTY ok31;
  --%PROPERTY ok32;
  --%PROPERTY ok33;
  --%PROPERTY ok34;
  --%PROPERTY ok35;
  --%PROPERTY ok36;
  --%PROPERTY ok37;
  --%PROPERTY ok38;
  --%PROPERTY ok39;
  --%PROPERTY ok40;
  --%PROPERTY ok41;
  --%PROPERTY ok42;
  --%PROPERTY ok43;
  --%PROPERTY ok44;

  --%REALIZABLE Obstacle, Noise, Heading, Button;
tel;
