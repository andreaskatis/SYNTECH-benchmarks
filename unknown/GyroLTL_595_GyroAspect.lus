const K = 5.0;
type env_frontDistSense = enum {CLEAR, BLOCKED};
type env_bluetoothCmd = enum {AUTO, bC_STP, bC_FWD, bC_BWD, bC_TURN_LEFT, bC_TURN_RIGHT};
type sys_balancer = enum {STP, FWD, BWD, TURN_LEFT, TURN_RIGHT};
type sys_spec_blockedState = enum {S0, S1, S2};
type sys_spec_moveAwayFromFrontObstacleState = enum {sS0, sS1};

node Initially(i: bool) returns (o: bool);
let
  o = i => true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node GyroAspect(frontDistSense : env_frontDistSense; backDistSense: env_frontDistSense; isReady : bool; bluetoothCmd : env_bluetoothCmd; balancer : sys_balancer; spec_blockedState : sys_spec_blockedState; spec_moveAwayFromFrontObstacleState : sys_spec_moveAwayFromFrontObstacleState; spec_moveAwayFromBackObstacleState : sys_spec_moveAwayFromFrontObstacleState; spec_forwardingState : sys_spec_moveAwayFromFrontObstacleState; spec_backwardingState : sys_spec_moveAwayFromFrontObstacleState) returns ();
var
  counter_gf1, counter_gf2, counter_gf3, counter_gf4, counter_gf5, counter_gf6, counter_gf7 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22 : bool;
  moveAwayFromFrontObstacle, moveAwayFromBackObstacle, turningOp : bool;
let

  ok1 = Initially(balancer = STP);
  ok2 = (not isReady) => balancer = STP;
  ok3 = (balancer = FWD) => (frontDistSense = CLEAR);
  ok4 = (balancer = BWD) => (backDistSense = CLEAR);

  counter_gf1 = 0.0 -> if (bluetoothCmd = AUTO => (balancer = FWD)) then 0.0 else pre(counter_gf1) + 1.0;
  ok5 = counter_gf1 < K;

  ok6 = (bluetoothCmd = AUTO) => ((frontDistSense = CLEAR and isReady) => (balancer = FWD));

  turningOp = (balancer = TURN_RIGHT or balancer = TURN_LEFT);
  ok7 = Initially(spec_blockedState = S0);

  ok8 = pre(bluetoothCmd = AUTO and isReady) => ((pre(spec_blockedState = S0 and (((not (frontDistSense = BLOCKED)) and (not (frontDistSense = CLEAR))) or frontDistSense = CLEAR)) and spec_blockedState = S0) or

  (pre(spec_blockedState = S0 and (frontDistSense = BLOCKED and (not turningOp) and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S1)) or

  (pre(spec_blockedState = S0 and (frontDistSense = BLOCKED and turningOp and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S2)) or

  (pre(spec_blockedState = S1) and (spec_blockedState = S1)) or
  (pre(spec_blockedState = S2 and (frontDistSense = CLEAR)) and (spec_blockedState = S0)) or
  (pre(spec_blockedState = S2 and ((not turningOp) and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S1)) or
  (pre(spec_blockedState = S2 and (turningOp and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S2)));

  counter_gf2 = 0.0 -> if ((bluetoothCmd = AUTO) => (spec_blockedState = S0 or spec_blockedState = S2)) then 0.0 else pre(counter_gf2) + 1.0;
  ok9 = counter_gf2 < K;

  ok10 = (bluetoothCmd = bC_FWD) => ((frontDistSense = CLEAR and isReady) => (balancer = FWD));
  ok11 = (bluetoothCmd = bC_BWD) => ((backDistSense = CLEAR and isReady) => (balancer = BWD));
  ok12 = (bluetoothCmd = bC_TURN_RIGHT) => (isReady => (balancer = TURN_RIGHT));
  ok13 = (bluetoothCmd = bC_TURN_LEFT) => (isReady => (balancer = TURN_LEFT));
  ok14 = (bluetoothCmd = bC_STP or (bluetoothCmd = bC_FWD and frontDistSense = BLOCKED) or (bluetoothCmd = bC_BWD and backDistSense = BLOCKED)) => (isReady => (balancer = STP));

  assert Initially(not isReady);
  assert Initially(bluetoothCmd = AUTO);
  assert Initially(frontDistSense = CLEAR and backDistSense = CLEAR);
  counter_gf3 = 0.0 -> if isReady then 0.0 else pre(counter_gf3) + 1.0;
  assert counter_gf3 < K;
  assert (pre(isReady) => isReady);

  moveAwayFromFrontObstacle = not(balancer = FWD or balancer = STP);

  ok15 = Initially(spec_moveAwayFromFrontObstacleState = sS0);

  ok16 = (pre(spec_moveAwayFromFrontObstacleState = sS0 and ((not moveAwayFromFrontObstacle) or (moveAwayFromFrontObstacle and ((not moveAwayFromFrontObstacle) or frontDistSense = CLEAR)))) and (spec_moveAwayFromFrontObstacleState = sS0)) or
  (pre(spec_moveAwayFromFrontObstacleState = sS0 and (moveAwayFromFrontObstacle and (not ((not moveAwayFromFrontObstacle) or frontDistSense = CLEAR)))) and (spec_moveAwayFromFrontObstacleState = sS1)) or
  (pre(spec_moveAwayFromFrontObstacleState = sS1 and ((not moveAwayFromFrontObstacle) or frontDistSense = CLEAR)) and (spec_moveAwayFromFrontObstacleState = sS0)) or
  (pre(spec_moveAwayFromFrontObstacleState = sS1 and (not ((not moveAwayFromFrontObstacle) or frontDistSense = CLEAR))) and (spec_moveAwayFromFrontObstacleState = sS1));

  counter_gf4 = 0.0 -> if (spec_moveAwayFromFrontObstacleState = sS0) then 0.0 else pre(counter_gf4) + 1.0;
  assert counter_gf4 < K;

  moveAwayFromBackObstacle = not (balancer = BWD or balancer = STP);

  ok17 = Initially(spec_moveAwayFromBackObstacleState = sS0);

  ok18 = (pre(spec_moveAwayFromBackObstacleState = sS0 and ((not moveAwayFromBackObstacle) or (moveAwayFromBackObstacle and ((not moveAwayFromBackObstacle) or backDistSense = CLEAR)))) and (spec_moveAwayFromBackObstacleState = sS0)) or
  (pre(spec_moveAwayFromBackObstacleState = sS0 and (moveAwayFromBackObstacle and (not ((not moveAwayFromBackObstacle) or backDistSense = CLEAR)))) and (spec_moveAwayFromBackObstacleState = sS1)) or
  (pre(spec_moveAwayFromBackObstacleState = sS1 and ((not moveAwayFromBackObstacle) or backDistSense = CLEAR)) and (spec_moveAwayFromBackObstacleState = sS0)) or
  (pre(spec_moveAwayFromBackObstacleState = sS1 and (not ((not moveAwayFromBackObstacle) or backDistSense = CLEAR))) and (spec_moveAwayFromBackObstacleState = sS1));

  counter_gf5 = 0.0 -> if (spec_moveAwayFromBackObstacleState = sS0) then 0.0 else pre(counter_gf5) + 1.0;
  assert counter_gf5 < K;

  ok19 = Initially(spec_forwardingState = sS0);

  ok20 = (pre(spec_forwardingState = sS0 and ((not (balancer = FWD)) or (balancer = FWD and (balancer <> FWD or frontDistSense = BLOCKED)))) and (spec_forwardingState = sS0)) or
  (pre(spec_forwardingState = sS0 and (balancer = FWD and (not (balancer <> FWD or frontDistSense = BLOCKED)))) and (spec_forwardingState = sS1)) or
  (pre(spec_forwardingState = sS1 and (balancer <> FWD or frontDistSense = BLOCKED)) and (spec_forwardingState = sS0)) or
  (pre(spec_forwardingState = sS1 and (not (balancer <> FWD or frontDistSense = BLOCKED))) and (spec_forwardingState = sS1));

  counter_gf6 = 0.0 -> if (spec_forwardingState = sS0) then 0.0 else pre(counter_gf6) + 1.0;
  assert counter_gf6 < K;

  ok21 = Initially(spec_backwardingState = sS0);

  ok22 = (pre(spec_backwardingState = sS0 and ((not (balancer = BWD)) or (balancer = BWD and (balancer <> BWD or backDistSense = BLOCKED)))) and (spec_backwardingState = sS0)) or
  (pre(spec_backwardingState = sS0 and (balancer = BWD and (not (balancer <> BWD or backDistSense = BLOCKED)))) and (spec_backwardingState = sS1)) or
  (pre(spec_backwardingState = sS1 and (balancer <> BWD or backDistSense = BLOCKED)) and (spec_backwardingState = sS0)) or
  (pre(spec_backwardingState = sS1 and (not (balancer <> BWD or backDistSense = BLOCKED))) and (spec_backwardingState = sS1));

  counter_gf7 = 0.0 -> if (spec_backwardingState = sS0) then 0.0 else pre(counter_gf7) + 1.0;
  assert counter_gf7 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;

  --%REALIZABLE frontDistSense, backDistSense, isReady, bluetoothCmd;
tel;
