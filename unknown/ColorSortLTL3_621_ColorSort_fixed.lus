const K = 2.0;

type env_color = enum {RED, GREEN, BLUE, BLACK, YELLOW, WHITE};
type env_ack_ver_hor = enum {MOVE, SLEEP};
type env_atEdge = enum {NOEDGE, EDGE};

type env_haltButton = enum {PRESS, RELEASE};

type sys_botMot = enum {PLACE, RIGHT, LEFT, STOP, INITPOS};
type sys_motSpeed = enum {LEVEL1, LEVEL2, LEVEL3};
type sys_reduce_num_of_cubes = enum {REDUCE, NOTREDUCE};
type sys_spec_state = enum {S0, S1, S2};

type sys_spec_stage = enum {WAIT, KICK, TOANGLEPLACE, TOANGLERIGHT, TOANGLELEFT, DROP, FROMANGLE};

type sys_spec_pausing = enum {pause, go};

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node ColorSort(color : env_color; detect : env_color; ack_ver_hor : env_ack_ver_hor; ack_bot : env_ack_ver_hor; atEdge : env_atEdge; color_seen : bool; haltButton : env_haltButton; speedButton : env_haltButton; verMot : env_ack_ver_hor; horMot : env_ack_ver_hor; botMot : sys_botMot; botMotColor : env_color; store_place : bool; spec_allsleep : bool; motSpeed : sys_motSpeed; spec_state : sys_spec_state; spec_stage : sys_spec_stage; spec_speedButtonValidPressed, spec_haltButtonValidPressed : bool; spec_pausing : sys_spec_pausing; responded1, responded2, responded3 : bool) returns ();
var
  counter_r1, counter_r2, counter_r3, counter_gf1, counter_gf2 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30, ok31, ok32, ok33, ok34, ok35, ok36, ok37, ok38, ok39, ok40 : bool;
let

  ok1 = Initially(spec_state = S0);

  ok2 = (pre(spec_state = S0 and ((not (ack_ver_hor = SLEEP and spec_stage = KICK and spec_pausing = go) and (not (detect = botMotColor))) or (ack_ver_hor = SLEEP and spec_stage = KICK and spec_pausing = go and ack_ver_hor = MOVE and spec_stage = DROP) or ((not (ack_ver_hor = MOVE and spec_stage = DROP)) and (detect = botMotColor)) or ((not (ack_ver_hor = SLEEP and spec_stage = KICK and spec_pausing = go)) and (ack_ver_hor = MOVE and spec_stage = DROP) and (detect = botMotColor)))) and spec_state = S0) or
  (pre(spec_state = S0 and ((ack_ver_hor = SLEEP and spec_stage = KICK and spec_pausing = go) and (not (ack_ver_hor = MOVE and spec_stage = DROP)) and (not (detect = botMotColor)))) and spec_state = S1) or
  (pre(spec_state = S1 and ((not (ack_ver_hor = MOVE and spec_stage = DROP)) and (detect = botMotColor))) and spec_state = S0) or
  (pre(spec_state = S1 and (not (ack_ver_hor = MOVE and spec_stage = DROP)) and (not (detect = botMotColor))) and spec_state = S1) or
  (pre(spec_state = S1 and (ack_ver_hor = MOVE and spec_stage = DROP)) and spec_state = S2) or
  (pre(spec_state = S2) and spec_state = S2);

  counter_gf1 = 0.0 -> if (spec_state = S0 or spec_state = S1) then 0.0 else pre(counter_gf1) + 1.0;
  ok3 = counter_gf1 < K;

  ok4 = ((haltButton = PRESS and pre(haltButton = RELEASE) => spec_haltButtonValidPressed));
  ok5 = (spec_haltButtonValidPressed => (haltButton = PRESS and pre(haltButton = RELEASE)));

  ok6 = pre((spec_haltButtonValidPressed and spec_pausing = go) or ((not spec_haltButtonValidPressed) and spec_pausing = pause)) => spec_pausing = pause;

  ok7 = pre(((not spec_haltButtonValidPressed) and spec_pausing = go) or (spec_haltButtonValidPressed and spec_pausing = pause)) => spec_pausing = go;

  --ok7 = respondsTo((spec_haltButtonValidPressed and spec_pausing = go), (spec_haltButtonValidPressed));
  ok8 = Initially(responded1);
  ok9 = responded1 => pre(spec_haltButtonValidPressed or responded1 and (not (spec_haltButtonValidPressed and spec_pausing = go)));
  ok10 = pre(spec_haltButtonValidPressed or responded1 and (not (spec_haltButtonValidPressed and spec_pausing = go))) => responded1;

  counter_r1 = 0.0 -> if responded1 then 0.0 else pre(counter_r1) + 1.0;
  ok11 = counter_r1 < K;

  ok12 = pre(spec_pausing = pause or ack_ver_hor = MOVE) => (pre(spec_allsleep) and spec_stage = pre(spec_stage));

  ok13 = pre(spec_stage <> WAIT) => botMotColor = pre(botMotColor);

  ok14 = verMot = MOVE => (botMot = STOP and horMot = SLEEP);

  ok15 = horMot = MOVE => (botMot = STOP and verMot = SLEEP);

  ok16 = botMot <> STOP => (verMot = SLEEP and horMot = SLEEP);

  ok17 = (spec_allsleep => (verMot = SLEEP and horMot = SLEEP and botMot = STOP));
  ok18 = ((verMot = SLEEP and horMot = SLEEP and botMot = STOP) => spec_allsleep);

  ok19 =  Initially((not store_place) and motSpeed = LEVEL1 and spec_stage = WAIT and spec_pausing = go);

  ok20 = pre(color = BLACK and spec_stage = WAIT) => (pre(spec_allsleep) and spec_stage = WAIT);

  ok21 = pre(color <> BLACK and spec_stage = WAIT and spec_pausing = go) => (pre(verMot = MOVE) and botMotColor = pre(color) and spec_stage = KICK);

  ok22 = pre(ack_ver_hor = SLEEP and spec_stage = KICK and spec_pausing = go and (not color_seen)) => ((pre((not color_seen) => (pre(botMot = RIGHT))) and spec_stage = TOANGLERIGHT) and (pre(color_seen) => (pre(botMot = PLACE) and spec_stage = TOANGLERIGHT)));

  ok23 = pre(ack_bot = MOVE and spec_stage = TOANGLEPLACE and spec_pausing = go) => (pre(botMot = PLACE) and spec_stage = TOANGLERIGHT);

  ok24 = pre(ack_bot = SLEEP and spec_stage = TOANGLEPLACE and spec_pausing = go) => (pre(horMot = MOVE) and spec_stage = DROP);

  ok25 = pre(atEdge <> EDGE and spec_stage = TOANGLERIGHT and detect <> botMotColor and spec_pausing = go) => (pre(botMot = RIGHT) and spec_stage = TOANGLERIGHT);

  ok26 = pre(atEdge = EDGE and spec_stage = TOANGLERIGHT and spec_pausing = go and detect <> botMotColor) => (pre(botMot = LEFT) and spec_stage = TOANGLELEFT);

  ok27 = pre(spec_stage = TOANGLELEFT and spec_pausing = go and detect <> botMotColor) => (pre(botMot = LEFT) and spec_stage = TOANGLELEFT);

  ok28 = pre((spec_stage = TOANGLERIGHT or spec_stage = TOANGLELEFT) and spec_pausing = go and detect = botMotColor) => (pre(horMot = MOVE) and spec_stage = DROP);

  ok29 = (store_place => ((spec_stage = TOANGLERIGHT or spec_stage = TOANGLELEFT) and spec_pausing = go and detect = botMotColor));
  ok30 = (((spec_stage = TOANGLERIGHT or spec_stage = TOANGLELEFT) and spec_pausing = go and detect = botMotColor) => store_place);

  --return to initial position
  ok31 = pre(((ack_ver_hor = SLEEP and spec_stage = DROP) or ((ack_bot = MOVE or (ack_bot = SLEEP and (true -> pre(spec_pausing = pause)))) and spec_stage = FROMANGLE)) and spec_pausing = go) => (pre(botMot = INITPOS) and spec_stage = FROMANGLE);

  ok32 = pre(ack_bot = SLEEP and (true -> pre(spec_pausing = go)) and spec_stage = FROMANGLE and spec_pausing = go) => (pre(spec_allsleep) and spec_stage = WAIT);

  --speed button
  ok33 = ((speedButton = PRESS and pre(speedButton = RELEASE)) => spec_speedButtonValidPressed);
  ok34 = (spec_speedButtonValidPressed => (speedButton = PRESS and pre(speedButton = RELEASE)));

  ok35 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL2;

  ok36 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL2)) => motSpeed = LEVEL3;

  ok37 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL3)) => motSpeed = LEVEL1;

  ok38 = ((not spec_speedButtonValidPressed) and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL1;

  ok39 = ((not spec_speedButtonValidPressed) and pre(motSpeed = LEVEL2)) => motSpeed = LEVEL2;

  ok40 = ((not spec_speedButtonValidPressed) and pre(motSpeed = LEVEL3)) => motSpeed = LEVEL3;

  --assert respondsTo((ack_ver_hor = MOVE), (ack_ver_hor = SLEEP));
  --assert respondsTo((ack_bot = MOVE), (ack_bot = SLEEP));

  assert Initially(responded2);
  assert responded2 => (pre((ack_ver_hor = SLEEP) or responded1 and (not (ack_ver_hor = MOVE))));
  assert (pre((ack_ver_hor = SLEEP) or responded1 and (not (ack_ver_hor = MOVE)))) => responded2;

  counter_r2 = 0.0 -> if (responded2) then 0.0 else pre(counter_r2) + 1.0;
  assert counter_r2 < K;

  --responded1 = true -> (pre((ack_ver_hor = SLEEP) or responded1 and (not (ack_ver_hor = MOVE))));

  assert Initially(responded3);
  assert responded3 => (pre((ack_bot = SLEEP) or responded2 and (not (ack_bot = MOVE))));
  assert (pre((ack_bot = SLEEP) or responded2 and (not (ack_bot = MOVE)))) => responded3;

  counter_r3 = 0.0 -> if (responded3) then 0.0 else pre(counter_r3) + 1.0;
  assert counter_r3 < K;
  --responded2 = true -> (pre((ack_bot = SLEEP) or responded2 and (not (ack_bot = MOVE))));

  assert (spec_stage <> KICK and spec_stage <> DROP) => ack_ver_hor = SLEEP;
  counter_gf2 = 0.0 -> if (color <> BLACK) then 0.0 else pre(counter_gf2) + 1.0;
  assert counter_gf2 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30 and ok31 and ok32 and ok33;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;
  --%PROPERTY ok23;
  --%PROPERTY ok24;
  --%PROPERTY ok25;
  --%PROPERTY ok26;
  --%PROPERTY ok27;
  --%PROPERTY ok28;
  --%PROPERTY ok29;
  --%PROPERTY ok30;
  --%PROPERTY ok31;
  --%PROPERTY ok32;
  --%PROPERTY ok33;
  --%PROPERTY ok34;
  --%PROPERTY ok35;
  --%PROPERTY ok36;
  --%PROPERTY ok37;
  --%PROPERTY ok38;
  --%PROPERTY ok39;
  --%PROPERTY ok40;

  --%REALIZABLE color, detect, ack_ver_hor, ack_bot, atEdge, color_seen, haltButton, speedButton;
tel;
