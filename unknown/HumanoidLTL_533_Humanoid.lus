const K = 2.0;
type env_Obstacle = enum {CLEAR, BLOCKED};

type sys_LeftMotor = enum {LM_FWD, LM_BWD, LM_STOP, LM_TURN_FWD, LM_TURN_BWD, LM_CALIB_TURN, LM_CALIB_FWD};
type sys_RightMotor = enum {RM_FWD, RM_BWD, RM_STOP, RM_TURN_FWD, RM_TURN_BWD, RM_CALIB_TURN, RM_CALIB_FWD};
type sys_HeadMotor = enum {HM_FWD, HM_BWD, HM_STOP};
type sys_nextMoveMode = enum {nMM_FWD, nMM_BWD, nMM_TURN_LEFT_1, nMM_TURN_LEFT_2};
type sys_state = enum {Q0, Q1, Q2, Q3};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Humanoid(Obstacle : env_Obstacle; LeftMotor : sys_LeftMotor; RightMotor : sys_RightMotor; HeadMotor : sys_HeadMotor; nextMoveMode : sys_nextMoveMode; state : sys_state; responded1 : bool) returns ();
var
  counter_r1, counter_gf1, counter_gf2 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25 : bool;
let

  ok1 = (pre(state = Q0 and nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => state = Q1;
  ok2 = (pre(state = Q1 and nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD) => state = Q2;
  ok3 = (pre(state = Q2 and nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => state = Q3;
  ok4 = (pre(state = Q1) and nextMoveMode = nMM_BWD) => state = Q1;
  ok5 = (pre(state = Q2) and nextMoveMode = nMM_FWD) => state = Q2;

  --there seems to be a typo in the following guarantee in the .spectra file
  ok6 = pre(nextMoveMode = nMM_TURN_LEFT_1 or nextMoveMode = nMM_TURN_LEFT_2) => state = Q0;
  ok7 = not (state = Q3);

  ok8 = (Obstacle = BLOCKED) => (not (nextMoveMode = nMM_FWD));
  ok9 = ((pre(nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD) => (LeftMotor = LM_FWD and RightMotor = RM_BWD));
  ok10 = ((LeftMotor = LM_FWD and RightMotor = RM_BWD) => (pre(nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD));
  ok11 = ((pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => (LeftMotor = LM_BWD and RightMotor = RM_FWD));
  ok12 = ((LeftMotor = LM_BWD and RightMotor = RM_FWD) => (pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD));

  counter_gf1 = 0.0 -> if nextMoveMode = nMM_FWD then 0.0 else pre(counter_gf1) + 1.0;
  ok13 = counter_gf1 < K;

  ok14 = (nextMoveMode = nMM_BWD) => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_BWD));
  ok15 = (pre(nextMoveMode = nMM_TURN_LEFT_2)) => (not (nextMoveMode = nMM_BWD));

  ok16 = ((pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_TURN_LEFT_1) => (LeftMotor = LM_CALIB_TURN and RightMotor = RM_CALIB_TURN));
  ok17 = ((LeftMotor = LM_CALIB_TURN and RightMotor = RM_CALIB_TURN) => (pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_TURN_LEFT_1));

  ok18 = (pre(nextMoveMode = nMM_BWD)) => (nextMoveMode <> nMM_TURN_LEFT_1);
  ok19 = ((pre(nextMoveMode = nMM_FWD) and pre(true -> pre(nextMoveMode = nMM_TURN_LEFT_2))) => (LeftMotor = LM_CALIB_FWD and RightMotor = RM_CALIB_FWD));
  ok20 = ((LeftMotor = LM_CALIB_FWD and RightMotor = RM_CALIB_FWD) => (pre(nextMoveMode = nMM_FWD) and pre(true -> pre(nextMoveMode = nMM_TURN_LEFT_2))));

  ok21 = ((pre(nextMoveMode = nMM_TURN_LEFT_1)) => (nextMoveMode = nMM_TURN_LEFT_2));
  ok22 = ((nextMoveMode = nMM_TURN_LEFT_2) => (pre(nextMoveMode = nMM_TURN_LEFT_1)));
  ok23 = (pre(nextMoveMode = nMM_TURN_LEFT_1)) => (LeftMotor = LM_FWD and RightMotor = RM_TURN_FWD);
  ok24 = (pre(nextMoveMode = nMM_TURN_LEFT_2)) => (LeftMotor = LM_BWD and RightMotor = RM_TURN_BWD);
  ok25 = (not (pre(nextMoveMode = nMM_TURN_LEFT_1 or nextMoveMode = nMM_TURN_LEFT_2))) => (not (LeftMotor = LM_TURN_BWD or RightMotor = RM_TURN_BWD or LeftMotor = LM_TURN_FWD or RightMotor = RM_TURN_FWD));

  --assert respondsTo((nextMoveMode <> nMM_FWD), (Obstacle = CLEAR));

  assert Initially(responded1);
  assert responded1 => (pre((Obstacle = CLEAR) or responded1 and (not (nextMoveMode <> nMM_FWD))));
  assert (pre((Obstacle = CLEAR) or responded1 and (not (nextMoveMode <> nMM_FWD)))) => responded1;

  counter_r1 = 0.0 -> if (responded1) then 0.0 else pre(counter_r1) + 1.0;
  assert counter_r1 < K;

  assert pre(nextMoveMode = nMM_BWD and Obstacle = CLEAR) => (Obstacle <> BLOCKED);
  counter_gf2 = 0.0 -> if (pre(nextMoveMode = nMM_TURN_LEFT_2) and Obstacle = CLEAR) then 0.0 else pre(counter_gf2) + 1.0;
  assert counter_gf2 < K;
  assert (pre(true -> pre(nextMoveMode = nMM_TURN_LEFT_2)) and pre(nextMoveMode = nMM_FWD)) => Obstacle = CLEAR;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;
  --%PROPERTY ok23;
  --%PROPERTY ok24;
  --%PROPERTY ok25;

  --%REALIZABLE Obstacle;
tel;
