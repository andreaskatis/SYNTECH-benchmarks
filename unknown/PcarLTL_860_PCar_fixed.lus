--appended prefix "IS_" to values CLEAR and BLOCKED in sideSense since JKind complains of value being used in multiple types

const K = 2.0;
type env_obstacle = enum {CLEAR, BLOCKED};
type env_sideSense = enum {CLOSE, CENTERED, FAR, CLOSE_PARKING, PARALLEL_PARKING ,PERPENDICULAR};
type env_parkResult = enum {NA, PARALLEL};
type env_colorSense = enum {BLACK, GREEN, RED};
type env_command = enum {cAUTO, cMANUAL, cFWD, cBWD, cFWD_RIGHT, cFWD_LEFT, cBWD_LEFT, cBWD_RIGHT, cRIGHT, cLEFT, cCENTER};
type env_reset = enum {FREE, PRESSED};

type sys_throttle = enum {FWD, BWD, STOP, BLOCKING_BWD, BLOCKING_FWD, EXIT_FWD};
type sys_steer = enum {RIGHT, LEFT, CENTER, EASY_RIGHT, EASY_LEFT};
type sys_parkCommand = enum {pSTART, pSTOP, pCHECK};
type sys_spec_policy = enum {SEEKING, MEASURING, PARKING_0, PARKING_1, PARKING_2, PARKED, EXIT_0, EXIT_1};


node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;


node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node PCar(obstacle : env_obstacle; sideSense : env_sideSense; parkResult : env_parkResult; colorSense : env_colorSense; command : env_command; reset : env_reset; throttle : sys_throttle; steer : sys_steer; parkCommand : sys_parkCommand; spec_park : bool; spec_policy : sys_spec_policy; responded1 : bool) returns ();
var
  counter_r1, counter_gf1, counter_gf2, counter_gf3 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30, ok31, ok32, ok33, ok34, ok35, ok36, ok37, ok38, ok39, ok40, ok41, ok42, ok43, ok44, ok45, ok46, ok47, ok48, ok49, ok50 : bool;
let

  ok1 = Initially(spec_policy = SEEKING);

  counter_gf1 = 0.0 -> if ((spec_policy = PARKED and colorSense = GREEN) or command <> cAUTO) then 0.0 else pre(counter_gf1) + 1.0;
  ok2 = counter_gf1 < K;

  ok3 = command = cMANUAL => (throttle = STOP and steer = CENTER);
  ok4 = command = cFWD => (throttle = FWD and steer = CENTER);
  ok5 = command = cBWD => (throttle = BWD and steer = CENTER);
  ok6 = command = cRIGHT => (throttle = STOP and steer = RIGHT);
  ok7 = command = cLEFT => (throttle = STOP and steer = LEFT);
  ok8 = command = cCENTER => (throttle = STOP and steer = CENTER);
  ok9 = command = cFWD_LEFT => (throttle = FWD and steer = LEFT);
  ok10 = command = cFWD_RIGHT => (throttle = FWD and steer = RIGHT);
  ok11 = command = cBWD_LEFT => (throttle = BWD and steer = LEFT);
  ok12 = command = cBWD_RIGHT => (throttle = BWD and steer = RIGHT);

  ok13 = pre(spec_policy = SEEKING) => (spec_policy = SEEKING or spec_policy = MEASURING or spec_policy = PARKING_0);
  ok14 = (spec_policy = SEEKING and command = cAUTO) => (throttle = FWD or throttle = STOP or throttle = BWD);
  ok15 = (spec_policy = SEEKING and obstacle = CLEAR and command = cAUTO) => (not (steer = RIGHT or steer = LEFT));

  ok16 = pre(spec_policy = MEASURING) => (spec_policy = SEEKING or spec_policy = MEASURING or spec_policy = PARKING_0);
  ok17 = (spec_policy = MEASURING and command = cAUTO) => (throttle <> BLOCKING_BWD and parkCommand <> pSTART and (steer = CENTER or steer = EASY_LEFT or steer = EASY_RIGHT));

  ok18 = pre(spec_policy = PARKING_0) => spec_policy = PARKING_1;
  ok19 = pre(spec_policy = PARKING_1) => spec_policy = PARKING_2;
  ok20 = pre(spec_policy = PARKING_2) => spec_policy = PARKED;
  ok21 = pre(spec_policy = PARKED) => (spec_policy = PARKED or spec_policy = EXIT_0);
  ok22 = pre(spec_policy = EXIT_0) => (spec_policy = EXIT_1);
  ok23 = pre(spec_policy = EXIT_1) => spec_policy = SEEKING;

  ok24 = (obstacle = CLEAR and spec_policy = SEEKING and parkResult = NA and command = cAUTO) => throttle = FWD;
  ok25 = pre(obstacle = BLOCKED and (spec_policy = SEEKING or spec_policy = MEASURING) and command = cAUTO) => (spec_policy = SEEKING and pre(not (throttle = FWD or throttle = BLOCKING_FWD or throttle = BLOCKING_BWD)) and pre(not (steer = EASY_RIGHT or steer = EASY_LEFT)));

  ok26 = obstacle = BLOCKED => parkCommand = pSTOP;
  ok27 = (spec_policy = SEEKING and parkResult = NA and command = cAUTO) => (throttle <> STOP);

  --seeking alignment
  ok28 = (spec_policy = SEEKING and obstacle = CLEAR and pre(obstacle = BLOCKED) and command = cAUTO) => steer = CENTER;
  ok29 = (spec_policy = SEEKING and obstacle = CLEAR and sideSense = CLOSE and command = cAUTO and pre(obstacle = CLEAR)) => steer = EASY_LEFT;
  ok30 = (spec_policy = SEEKING and obstacle = CLEAR and sideSense = FAR and command = cAUTO and pre(obstacle = CLEAR)) => steer = EASY_RIGHT;
  ok31 = (spec_policy = SEEKING and obstacle = CLEAR and sideSense = CENTERED and pre(sideSense = CENTERED and obstacle = CLEAR) and command = cAUTO) => steer = CENTER;
  ok32 = (spec_policy = SEEKING and obstacle = CLEAR and pre(sideSense = FAR) and sideSense = CENTERED and command = cAUTO and pre(obstacle = CLEAR) ) => steer = EASY_LEFT;
  ok33 = (spec_policy = SEEKING and obstacle = CLEAR and pre(sideSense = CLOSE) and sideSense = CENTERED and command = cAUTO and pre(obstacle = CLEAR)) => steer = EASY_RIGHT;

  --measuring alignment
  ok34 = (spec_policy = MEASURING and obstacle = CLEAR and sideSense = CLOSE_PARKING and command = cAUTO) => (steer = EASY_LEFT);
  ok35 = (spec_policy = MEASURING and obstacle = CLEAR and sideSense = PERPENDICULAR and command = cAUTO) => (steer = EASY_RIGHT);
  ok36 = (spec_policy = MEASURING and obstacle = CLEAR and sideSense = PARALLEL_PARKING and pre(sideSense = PARALLEL_PARKING) and command = cAUTO) => steer = CENTER;
  ok37 = (spec_policy = MEASURING and obstacle = CLEAR and sideSense = PARALLEL_PARKING and pre(sideSense = CLOSE_PARKING) and command = cAUTO) => steer = EASY_RIGHT;
  ok38 = (spec_policy = MEASURING and obstacle = CLEAR and sideSense = PARALLEL_PARKING and pre(sideSense = PERPENDICULAR) and command = cAUTO) => steer = EASY_LEFT;

  --state transitions
  ok39 = pre(spec_policy = SEEKING and (sideSense = CLOSE or sideSense = CENTERED or sideSense = FAR)) => ((spec_policy = pre(spec_policy)) and pre(parkCommand = pSTOP));

  ok40 = pre(spec_policy = SEEKING and (not (sideSense = CLOSE or sideSense = CENTERED or sideSense = FAR)) and obstacle = CLEAR and command = cAUTO) => ((spec_policy = MEASURING) and pre(throttle = FWD and parkCommand = pSTART and steer = CENTER));

  ok41 = pre(spec_policy = MEASURING and (sideSense = CLOSE or sideSense = CENTERED or sideSense = FAR) and parkResult = NA) => (spec_policy = SEEKING and pre(parkCommand = pSTOP));

  ok42 = pre(spec_policy = MEASURING and (not (sideSense = CLOSE or sideSense = CENTERED or sideSense = FAR)) and obstacle = CLEAR and parkResult = NA and command = cAUTO) => ((spec_policy = pre(spec_policy)) and pre(throttle = FWD and parkCommand = pCHECK));

  ok43 = pre(((spec_policy = MEASURING and sideSense = PARALLEL_PARKING) or (spec_policy = SEEKING and (true -> pre(sideSense = PARALLEL_PARKING and spec_policy = MEASURING)))) and obstacle = CLEAR and parkResult = PARALLEL and command = cAUTO) => (spec_policy = PARKING_0 and pre(throttle = STOP and parkCommand = pSTOP));

  ok44 = pre(spec_policy = PARKING_0 and command = cAUTO) => (spec_policy = PARKING_1 and pre(throttle = BLOCKING_FWD and steer = CENTER and parkCommand = pSTOP));

  ok45 = pre(spec_policy = PARKING_1 and command = cAUTO) => (spec_policy = PARKING_2 and pre(throttle = BLOCKING_BWD and steer = RIGHT and parkCommand = pSTOP));
  ok46 = pre(spec_policy = PARKING_2 and command = cAUTO) => (spec_policy = PARKED and pre(throttle = BLOCKING_BWD and steer = LEFT and parkCommand = pSTOP));
  ok47 = pre(spec_policy = PARKED and colorSense = GREEN and reset = FREE and command = cAUTO) => ((spec_policy = pre(spec_policy)) and pre(throttle = STOP and steer = CENTER and parkCommand = pSTOP));
  ok48 = pre(spec_policy = PARKED and ((not (colorSense = GREEN)) or reset = PRESSED) and command = cAUTO) => ((spec_policy = EXIT_0) and pre(throttle = EXIT_FWD and steer = LEFT and parkCommand = pSTOP));
  ok49 = pre(spec_policy = EXIT_0 and command = cAUTO) => ((spec_policy = EXIT_1) and pre(throttle = EXIT_FWD and steer = RIGHT and parkCommand = pSTOP));
  ok50 = pre(spec_policy = EXIT_1 and command = cAUTO) => ((spec_policy = SEEKING) and pre(steer = CENTER and throttle = STOP));

  assert pre(spec_policy = SEEKING) => parkResult = NA;
  counter_gf2 = 0.0 -> if (spec_policy = MEASURING and parkResult = PARALLEL and obstacle = CLEAR) then 0.0 else pre(counter_gf2) + 1.0;
  assert counter_gf2 < K;
  assert Initially(parkResult = NA and command = cAUTO and reset = FREE);
  --assert respondsTo((throttle = BWD), (obstacle = CLEAR));

  assert Initially(responded1);
  assert responded1 => (pre((obstacle = CLEAR) or responded1 and (not (throttle = BWD))));
  assert (pre((obstacle = CLEAR) or responded1 and (not (throttle = BWD)))) => responded1;

  counter_r1 = 0.0 -> if (responded1) then 0.0 else pre(counter_r1) + 1.0;

  assert counter_r1 < K;

  assert pre(throttle = STOP) => ((obstacle = pre(obstacle)) and (sideSense = pre(sideSense)));
  assert pre(spec_policy <> PARKED) => colorSense = BLACK;
  counter_gf3 = 0.0 -> if (spec_policy = PARKED and colorSense = GREEN and reset = FREE) then 0.0 else pre(counter_gf3) + 1.0;
  assert counter_gf3 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30 and ok31 and ok32 and ok33 and ok34 and ok35 and ok36 and ok37 and ok38 and ok39 and ok40 and ok41 and ok42 and ok43 and ok44 and ok45 and ok46 and ok47 and ok48 and ok49 and ok50;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;
  --%PROPERTY ok23;
  --%PROPERTY ok24;
  --%PROPERTY ok25;
  --%PROPERTY ok26;
  --%PROPERTY ok27;
  --%PROPERTY ok28;
  --%PROPERTY ok29;
  --%PROPERTY ok30;
  --%PROPERTY ok31;
  --%PROPERTY ok32;
  --%PROPERTY ok33;
  --%PROPERTY ok34;
  --%PROPERTY ok35;
  --%PROPERTY ok36;
  --%PROPERTY ok37;
  --%PROPERTY ok38;
  --%PROPERTY ok39;
  --%PROPERTY ok40;
  --%PROPERTY ok41;
  --%PROPERTY ok42;
  --%PROPERTY ok43;
  --%PROPERTY ok44;
  --%PROPERTY ok45;
  --%PROPERTY ok46;
  --%PROPERTY ok47;
  --%PROPERTY ok48;
  --%PROPERTY ok49;
  --%PROPERTY ok50;

  --%REALIZABLE obstacle, sideSense, parkResult, colorSense, command, reset;
tel;
