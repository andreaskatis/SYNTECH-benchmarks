const K = 2.0;

type env_color = enum {RED, GREEN, BLUE, BLACK, YELLOW, WHITE};
type env_ack_ver = enum {MOVE, SLEEP};
type env_starting_pos = enum {YES, NO};

type env_speedButton = enum {PRESS, RELEASE};

type sys_botMot = enum {SEEK, STOP, RETURN};
type sys_motSpeed = enum {LEVEL1, LEVEL2, LEVEL3};

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node ColorSort(color : env_color; detect : env_color; ack_ver, ack_hor, ack_bot : env_ack_ver; starting_pos : env_starting_pos; speedButton : env_speedButton; verMot, horMot : env_ack_ver; botMot : sys_botMot; motSpeed : sys_motSpeed; spec_currentColor : env_color; spec_dropping : bool; spec_speedButtonValidPressed, spec_waiting_ack_ver_mot, spec_waiting_ack_hor_mot : bool; responded1, responded2, responded3 : bool) returns ();
var
  counter_r1, counter_r2, counter_r3, counter_gf1, counter_gf2, counter_gf3 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30, ok31, ok32, ok33, ok34, ok35, ok36, ok37, ok38, ok39, ok40 : bool;
  allsleep, nonemove, verhor_dontmove, onlybotmoves : bool;
let
  allsleep = (verMot = SLEEP and horMot = SLEEP and botMot = STOP);
  nonemove = (ack_ver = SLEEP and ack_hor = SLEEP and ack_bot = SLEEP);
  verhor_dontmove = ack_ver = SLEEP and ack_hor = SLEEP;
  onlybotmoves = ack_ver = SLEEP and ack_hor = SLEEP and ack_bot = MOVE;

  ok1 = verMot = MOVE => (botMot = STOP and horMot = SLEEP);
  ok2 = horMot = MOVE => (botMot = STOP and verMot = SLEEP);
  ok3 = botMot <> STOP => (verMot = SLEEP and horMot = SLEEP);
  ok4 = (ack_ver = MOVE or ack_hor = MOVE) => allsleep;

  ok5 = pre(verMot = SLEEP) => (spec_currentColor = pre(spec_currentColor));

  ok6 = pre(verMot = MOVE) => spec_currentColor = pre(color);

  ok7 = ((spec_dropping = pre(spec_dropping)) => (pre(verMot = SLEEP and horMot = SLEEP)));
  ok8 = ((pre(verMot = SLEEP and horMot = SLEEP)) => (spec_dropping = pre(spec_dropping)));

  ok9 = Initially((not spec_dropping) and motSpeed = LEVEL1);

  ok10 = (((not spec_dropping) and starting_pos = NO and verhor_dontmove) => botMot = RETURN);
  ok11 = (botMot = RETURN => ((not spec_dropping) and starting_pos = NO and verhor_dontmove));

  ok12 = ((not spec_dropping) and starting_pos = YES and color = BLACK) => allsleep;

  ok13 = (color = BLACK or spec_dropping) => verMot = SLEEP;

  ok14 = (((not spec_dropping) and starting_pos = YES and nonemove and color <> BLACK) => verMot = MOVE);
  ok15 = (verMot = MOVE => ((not spec_dropping) and starting_pos = YES and nonemove and color <> BLACK));

  ok16 = ((spec_dropping and detect <> spec_currentColor and verhor_dontmove) => botMot = SEEK);
  ok17 = (botMot = SEEK => (spec_dropping and detect <> spec_currentColor and verhor_dontmove));

  ok18 = ((spec_dropping and detect = spec_currentColor and verhor_dontmove) => horMot = MOVE);
  ok19 = (horMot = MOVE => (spec_dropping and detect = spec_currentColor and verhor_dontmove));

  ok20 = ((speedButton = PRESS and pre(speedButton = RELEASE)) => spec_speedButtonValidPressed);
  ok21 = (spec_speedButtonValidPressed => (speedButton = PRESS and pre(speedButton = RELEASE)));

  ok22 = pre(spec_speedButtonValidPressed and motSpeed = LEVEL1) => motSpeed = LEVEL2;

  ok23 = pre(spec_speedButtonValidPressed and motSpeed = LEVEL2) => motSpeed = LEVEL3;

  ok24 = pre(spec_speedButtonValidPressed and motSpeed = LEVEL3) => motSpeed = LEVEL1;

  ok25 = pre(not spec_speedButtonValidPressed) => motSpeed = pre(motSpeed);

  --environment specifications

  ok26 = Initially((not spec_waiting_ack_ver_mot));

  ok27 = pre((not spec_waiting_ack_ver_mot) and verMot <> MOVE) => (not spec_waiting_ack_ver_mot);

  ok28 = pre((not spec_waiting_ack_ver_mot) and verMot = MOVE) => spec_waiting_ack_ver_mot;

  ok29 = pre(spec_waiting_ack_ver_mot and ack_ver = SLEEP) => (not spec_waiting_ack_ver_mot);

  ok30 = pre(spec_waiting_ack_ver_mot and ack_ver <> SLEEP) => spec_waiting_ack_ver_mot;

  assert (not spec_waiting_ack_ver_mot) => ack_ver = SLEEP;
  --assert respondsTo(spec_waiting_ack_ver_mot, (ack_ver = SLEEP));

  assert Initially(responded1);
  assert responded1 => (pre((ack_ver = SLEEP) or responded1 and (not (spec_waiting_ack_ver_mot))));
  assert (pre((ack_ver = SLEEP) or responded1 and (not (spec_waiting_ack_ver_mot)))) => responded1;

  counter_r1 = 0.0 -> if (responded1) then 0.0 else pre(counter_r1) + 1.0;
  assert counter_r1 < K;

  ok31 = Initially((not spec_waiting_ack_hor_mot));

  ok32 = pre((not spec_waiting_ack_hor_mot) and horMot <> MOVE) => (not spec_waiting_ack_hor_mot);

  ok33 = pre((not spec_waiting_ack_hor_mot) and horMot = MOVE) => spec_waiting_ack_hor_mot;

  ok34 = pre(spec_waiting_ack_hor_mot and ack_hor = SLEEP) => (not spec_waiting_ack_hor_mot);

  ok35 = pre(spec_waiting_ack_hor_mot and ack_hor <> SLEEP) => spec_waiting_ack_hor_mot;

  assert (not spec_waiting_ack_hor_mot) => ack_hor = SLEEP;

  assert Initially(responded2);
  assert responded2 => pre(ack_hor = SLEEP or responded2 and (not spec_waiting_ack_hor_mot));
  assert pre(ack_hor = SLEEP or responded2 and (not spec_waiting_ack_hor_mot)) => responded2;

  counter_r2 = 0.0 -> if responded2 then 0.0 else pre(counter_r2) + 1.0;
  assert counter_r2 < K;
  --assert respondsTo(spec_waiting_ack_hor_mot, (ack_hor = SLEEP));

  counter_gf1 = 0.0 -> if (color <> BLACK) then 0.0 else pre(counter_gf1) + 1.0;
  assert counter_gf1 < K;

  counter_gf2 = 0.0 -> if (ack_hor = MOVE) then 0.0 else pre(counter_gf2) + 1.0;
  assert counter_gf2 < K;

  ok36 = Initially(responded3);
  ok37 = responded3 => pre((horMot = MOVE and detect = spec_currentColor) or responded3 and (not (color <> BLACK)));
  ok38 = pre((horMot = MOVE and detect = spec_currentColor) or responded3 and (not (color <> BLACK))) => responded3;

  counter_r3 = 0.0 -> if responded3 then 0.0 else pre(counter_r3) + 1.0;
  ok39 = counter_r3 < K;
  --ok30 = respondsTo(color <> BLACK, (horMot = MOVE and detect = spec_currentColor));

  counter_gf3 = 0.0 -> if (horMot = MOVE) then 0.0 else pre(counter_gf3) + 1.0;
  ok40 = counter_gf3 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30 and ok31;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;
  --%PROPERTY ok21;
  --%PROPERTY ok22;
  --%PROPERTY ok23;
  --%PROPERTY ok24;
  --%PROPERTY ok25;
  --%PROPERTY ok26;
  --%PROPERTY ok27;
  --%PROPERTY ok28;
  --%PROPERTY ok29;
  --%PROPERTY ok30;
  --%PROPERTY ok31;
  --%PROPERTY ok32;
  --%PROPERTY ok33;
  --%PROPERTY ok34;
  --%PROPERTY ok35;
  --%PROPERTY ok36;
  --%PROPERTY ok37;
  --%PROPERTY ok38;
  --%PROPERTY ok39;
  --%PROPERTY ok40;

  --%REALIZABLE color, detect, ack_ver, ack_hor, ack_bot, starting_pos, speedButton;
tel;
