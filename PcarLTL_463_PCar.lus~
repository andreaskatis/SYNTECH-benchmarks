--appended prefix "IS_" to values CLEAR and BLOCKED in sideSense since JKind complains of value being used in multiple types

const K = 2.0;
type env_obstacle = enum {CLEAR, BLOCKED, OBJECT};
type env_sideSense = enum {IS_CLEAR, P_O, IS_BLOCKED};
type sys_throttle = enum {FWD, BWD, STOP};
type sys_steer = enum {RIGHT, LEFT, CENTER};


node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns ();
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node PCar(obstacle : env_obstacle; sideSense : env_sideSense; throttle : sys_throttle; steer : sys_steer) returns (ok : bool);
var
  counter_gf1 : real;
  ok1, ok2, ok3 : bool;
let
  counter_gf1 = 0.0 -> if (throttle = FWD and steer = CENTER) then 0.0 else pre(counter_gf1) + 1.0;

  assert true -> (pre(throttle) = BWD => obstacle = CLEAR);
  assert respondsTo((throttle = FWD and steer = CENTER and sideSense = IS_BLOCKED),(sideSense = IS_CLEAR));

  ok1 = (obstacle = BLOCKED) => not (throttle = FWD);
  ok2 = ((obstacle = CLEAR) and (sideSense = IS_CLEAR)) => steer = CENTER;
  ok3 = counter_gf1 < K;

  --ok = ok1 and ok2 and ok3;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;

  --%REALIZABLE obstacle, sideSense;
tel;
