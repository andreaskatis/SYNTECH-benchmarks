const K = 2;
type env_frontDistSense = enum {CLEAR, BLOCKED};
type env_bluetoothCmd = enum {bSTP, bFWD, bBWD, bTURN_LEFT, bTURN_RIGHT, bSWITCH_MODE, bSPEED_DOWN, bSPEED_UP, bNOP};

type sys_balancer = enum {STP, FWD, BWD, TURN_LEFT, TURN_RIGHT};
type sys_balancerSpeed = enum {SLOW, REGULAR, FAST};
type sys_spec_mode = enum {AUTO, MANUAL};
type sys_spec_blockedState = enum {S0, S1, S2};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : int;
let
  counter_gf = 0 -> if responded then 0 else pre(counter_gf) + 1;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node GyroAspect(frontDistSense : env_frontDistSense; backDistSense : env_frontDistSense; isReady : bool; bluetoothCmd : env_bluetoothCmd; balancer : sys_balancer; balancerSpeed : sys_balancerSpeed; spec_mode : sys_spec_mode; spec_manualCmd : sys_balancer; spec_blockedState : sys_spec_blockedState) returns (ok : bool);
var
  counter_gf1, counter_gf2, counter_gf3 : int;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19 : bool;
  turningOp, bluetoothDrivingCmd, moveAwayFromFrontObstacle, moveAwayFromBackObstacle : bool;
let

  ok1 = Initially(balancer = STP);

  ok2 = (not isReady) => balancer = STP;
  ok3 = (balancer = FWD) => (frontDistSense = CLEAR);
  ok4 = (balancer = BWD) => (backDistSense = CLEAR);

  counter_gf1 = 0 -> if (spec_mode = AUTO => balancer = FWD) then 0 else pre(counter_gf1) + 1;
  ok5 = counter_gf1 < K;

  turningOp =  (balancer = TURN_RIGHT or balancer = TURN_LEFT);

  ok6 = Initially(spec_blockedState = S0);

  ok7 = pre(spec_mode = AUTO and isReady) => ((pre(spec_blockedState = S0 and (((not (frontDistSense = BLOCKED)) and (not (frontDistSense = CLEAR))) or (frontDistSense = CLEAR))) and spec_blockedState = S0) or (pre(spec_blockedState = S0 and frontDistSense = BLOCKED and (not turningOp) and (not (frontDistSense = CLEAR))) and spec_blockedState = S1) or (pre(spec_blockedState = S0 and frontDistSense = BLOCKED and turningOp and (not (frontDistSense = CLEAR))) and spec_blockedState = S2) or (pre(spec_blockedState = S1) and spec_blockedState = S1) or (pre(spec_blockedState = S2 and frontDistSense = CLEAR) and spec_blockedState = S0) or (pre(spec_blockedState = S2 and (not turningOp) and (not (frontDistSense = CLEAR))) and spec_blockedState = S1) or (pre((spec_blockedState = S2) and turningOp and (not (frontDistSense = CLEAR))) and spec_blockedState = S2));

  counter_gf2 = 0 -> if (spec_mode = AUTO => (spec_blockedState = S0 or spec_blockedState = S2)) then 0 else pre(counter_gf2) + 1;
  ok8 = counter_gf2 < K;

  ok9 = Initially(spec_mode = AUTO);
  ok10 = (pre(spec_mode = AUTO and bluetoothCmd = bSWITCH_MODE and spec_manualCmd = STP) and spec_mode = MANUAL) or (pre(spec_mode = MANUAL and bluetoothCmd = bSWITCH_MODE) and spec_mode = AUTO) or (pre(bluetoothCmd <> bSWITCH_MODE) and spec_mode = pre(spec_mode));

  ok11 = Initially(balancerSpeed = REGULAR);

  ok12 = (pre(balancerSpeed = SLOW and bluetoothCmd = bSPEED_DOWN) and balancerSpeed = SLOW) or
         (pre(balancerSpeed = SLOW and bluetoothCmd = bSPEED_UP) and balancerSpeed = REGULAR) or
         (pre(balancerSpeed = REGULAR and bluetoothCmd = bSPEED_DOWN) and balancerSpeed = SLOW) or
         (pre(balancerSpeed = REGULAR and bluetoothCmd = bSPEED_UP) and balancerSpeed = FAST) or
         (pre(balancerSpeed = FAST and bluetoothCmd = bSPEED_DOWN) and balancerSpeed = REGULAR) or
         (pre(balancerSpeed = FAST and bluetoothCmd = bSPEED_UP) and balancerSpeed = FAST) or
         (pre(bluetoothCmd <> bSPEED_DOWN and bluetoothCmd <> bSPEED_UP) and balancerSpeed = pre(balancerSpeed));

  -- manual mode specifications
  ok13 = (spec_mode = MANUAL) => ((bluetoothCmd = bSTP => spec_manualCmd = STP) and (bluetoothCmd = bFWD => spec_manualCmd = FWD) and
                                  (bluetoothCmd = bBWD => spec_manualCmd = BWD) and (bluetoothCmd = bTURN_LEFT => spec_manualCmd = TURN_LEFT) and (bluetoothCmd = bTURN_RIGHT => spec_manualCmd = TURN_RIGHT));

  bluetoothDrivingCmd = (bluetoothCmd = bSTP or bluetoothCmd = bFWD or bluetoothCmd = bBWD or bluetoothCmd = bTURN_LEFT or bluetoothCmd = bTURN_RIGHT);

  ok14 = (spec_mode = MANUAL) => ((not bluetoothDrivingCmd) => ((pre(spec_manualCmd = STP) => spec_manualCmd = STP) and
                                                                (pre(spec_manualCmd = FWD) => spec_manualCmd = FWD) and
                                                                (pre(spec_manualCmd = BWD) => spec_manualCmd = BWD) and
                                                                (pre(spec_manualCmd = TURN_LEFT) => spec_manualCmd = TURN_LEFT) and
                                                                (pre(spec_manualCmd = TURN_RIGHT) => spec_manualCmd = TURN_RIGHT)));

  ok15 = (spec_mode = MANUAL) => (spec_manualCmd = FWD => ((frontDistSense = CLEAR and isReady) => balancer = FWD));
  ok16 = (spec_mode = MANUAL) => (spec_manualCmd = BWD => ((backDistSense = CLEAR and isReady) => balancer = BWD));
  ok17 = (spec_mode = MANUAL) => (spec_manualCmd = TURN_RIGHT => (isReady => balancer = TURN_RIGHT));
  ok18 = (spec_mode = MANUAL) => (spec_manualCmd = TURN_LEFT => (isReady => balancer = TURN_LEFT));
  ok19 = (spec_mode = MANUAL) => ((spec_manualCmd = STP or (spec_manualCmd = FWD and frontDistSense = BLOCKED) or (spec_manualCmd = BWD and backDistSense = BLOCKED)) => (isReady => balancer = STP));

  assert Initially(not isReady);
  assert Initially(bluetoothCmd = bNOP);
  assert Initially(frontDistSense = CLEAR and backDistSense = CLEAR);

  counter_gf3 = 0 -> if isReady then 0 else pre(counter_gf3) + 1;
  assert counter_gf3 < K;
  assert (pre(isReady) => isReady);

  moveAwayFromFrontObstacle = not (balancer = FWD or balancer = STP);
  assert respondsTo(moveAwayFromFrontObstacle, ((not moveAwayFromFrontObstacle) or frontDistSense = CLEAR));

  moveAwayFromBackObstacle = not (balancer = BWD or balancer = STP);
  assert respondsTo(moveAwayFromBackObstacle, ((not moveAwayFromBackObstacle) or backDistSense = CLEAR));

  assert respondsTo(balancer = FWD, ((not (balancer = FWD)) or frontDistSense = BLOCKED));
  assert respondsTo(balancer = BWD, ((not (balancer = BWD)) or backDistSense = BLOCKED));

  ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19;

  --%PROPERTY ok;
  --%REALIZABLE frontDistSense, backDistSense, isReady, bluetoothCmd;
tel;
