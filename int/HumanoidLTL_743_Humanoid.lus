const K = 2;
type env_Obstacle = enum {CLEAR, BLOCKED};
type env_Noise = enum {QUIET, NOISE};
type env_Heading = enum {N, SO};
type env_Button = enum {FREE, PRESSED};

type sys_LeftMotor = enum {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN, CALIB_FWD};

--enums cant share same values
--type sys_RightMotor = enum {RM_FWD, RM_BWD, RM_STOP, RM_TURN_FWD, RM_TURN_BWD, RM_CALIB_TURN, RM_CALIB_FWD};

type sys_HeadMotor = enum {HM_FWD, HM_BWD, HM_STOP};
type sys_spec_nextMoveMode = enum {snMM_FWD, snMM_BWD, snMM_TURN_LEFT};
type sys_spec_specState = enum {Q0, Q1, Q2, Q3};
type sys_spec_turnState = enum {T0, T1, T2, T3};

-- in JKIND (lustre?) enums can't share the same values. as such, next_head is of type sys_Heading here.
--type sys_next_head = enum {nh_N, nh_NW, nh_W, nh_SW, nh_SO, nh_SE, nh_EA, nh_NE};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : int;
let
  counter_gf = 0 -> if responded then 0 else pre(counter_gf) + 1;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Humanoid(Obstacle : env_Obstacle; Noise : env_Noise; Heading : env_Heading; Button : env_Button; LeftMotor : sys_LeftMotor; RightMotor : sys_LeftMotor; HeadMotor : sys_HeadMotor; spec_nextMoveMode : sys_spec_nextMoveMode; spec_specState : sys_spec_specState; spec_turnState : sys_spec_turnState; spec_nextHead : env_Heading) returns (ok : bool);
var
  counter_gf1 : int;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30 : bool;
let

  --inital state
  ok1 = Initially(spec_specState = Q0);
  ok2 = Initially(spec_turnState = T0);
  ok3 = Initially(spec_nextHead = SO);

  --goals
  counter_gf1 = 0 -> if (spec_nextMoveMode = snMM_FWD) then 0 else pre(counter_gf1) + 1;
  ok4 = counter_gf1 < K;

  --to prevent robot from going fwd <-> bwd indefinitely
  ok5 = (pre(spec_specState = Q0 and spec_nextMoveMode = snMM_FWD) and spec_nextMoveMode = snMM_BWD) => spec_specState = Q1;
  ok6 = (pre(spec_specState = Q1 and spec_nextMoveMode = snMM_BWD) and spec_nextMoveMode = snMM_FWD) => spec_specState = Q2;
  ok7 = (not (pre(spec_specState = Q2 and spec_nextMoveMode = snMM_FWD) and spec_nextMoveMode = snMM_BWD));
  ok8 = (pre(spec_specState = Q1) and spec_nextMoveMode = snMM_BWD) => spec_specState = Q1;
  ok9 = (pre(spec_specState = Q2) and spec_nextMoveMode = snMM_FWD) => spec_specState = Q2;
  ok10 = true -> (pre(spec_nextMoveMode = snMM_TURN_LEFT) => spec_specState = Q0);


  --automaton for searching direction
  ok11 = respondsTo((Noise = NOISE), (Heading = spec_nextHead));


  --determine heading
  ok12 = true -> (pre(Button = PRESSED) => spec_nextHead = Heading);
  ok13 = true -> (pre(Button = FREE) => spec_nextHead = pre(spec_nextHead));


  ok14 = (Obstacle = BLOCKED) => (not (spec_nextMoveMode = snMM_FWD));
  ok15 = true -> (((pre(spec_nextMoveMode = snMM_BWD) and spec_nextMoveMode = snMM_FWD) => (LeftMotor = FWD and RightMotor = BWD)) and ((LeftMotor = FWD and RightMotor = BWD) => (pre(spec_nextMoveMode = snMM_BWD) and spec_nextMoveMode = snMM_FWD)));
  ok16 = ((pre(spec_nextMoveMode = snMM_FWD) and spec_nextMoveMode = snMM_BWD) => (LeftMotor = BWD and RightMotor = FWD)) and ((LeftMotor = BWD and RightMotor = FWD) => (pre(spec_nextMoveMode = snMM_FWD) and spec_nextMoveMode = snMM_BWD));
  ok17 = true -> (spec_nextMoveMode = snMM_BWD => (pre(spec_nextMoveMode = snMM_FWD or spec_nextMoveMode = snMM_BWD)));
  ok18 = true -> (pre(spec_nextMoveMode = snMM_BWD) => (spec_nextMoveMode = snMM_FWD or spec_nextMoveMode = snMM_BWD));


  --turning - automaton
  ok19 = true -> (spec_turnState = T0 => pre(spec_turnState = T0 or spec_turnState = T3));
  ok20 = true -> (pre(spec_turnState = T0 and (not (spec_nextMoveMode = snMM_TURN_LEFT))) => spec_turnState = T0);
  ok21 = true -> (pre(spec_nextMoveMode = snMM_TURN_LEFT and (true -> pre(spec_nextMoveMode = snMM_FWD)) and spec_turnState = T0) => spec_turnState = T1);
  ok22 = true -> (pre(spec_turnState = T1) => (spec_turnState = T2 and pre(spec_nextMoveMode = snMM_TURN_LEFT)));
  ok23 = true -> (pre(spec_turnState = T2 and spec_nextMoveMode = snMM_TURN_LEFT) => spec_turnState = T1);
  ok24 = true -> (pre(spec_turnState = T2 and spec_nextMoveMode = snMM_FWD) => spec_turnState = T3);
  ok25 = true -> (pre(spec_turnState = T3 and spec_nextMoveMode = snMM_FWD) => spec_turnState = T0);
  ok26 = true -> (pre(spec_turnState = T3 and spec_nextMoveMode <> snMM_FWD) => spec_turnState = T2);

  --movement - turning
  ok27 = ((pre(spec_turnState = T0) and spec_turnState = T1) => (LeftMotor = CALIB_TURN and RightMotor = CALIB_TURN)) and ((LeftMotor = CALIB_TURN and RightMotor = CALIB_TURN) => (pre(spec_turnState = T0) and spec_turnState = T1));
  ok28 = true -> ((spec_turnState = T2 => pre(LeftMotor = FWD and RightMotor = TURN_FWD)) and (pre(LeftMotor = FWD and RightMotor = TURN_FWD) => spec_turnState = T2));
  ok29 = (spec_turnState = T2 => (LeftMotor = BWD and RightMotor = TURN_BWD)) and ((LeftMotor = BWD and RightMotor = TURN_BWD) => spec_turnState = T2);
  ok30 = true -> (((pre(spec_turnState = T3) and spec_turnState = T0) => (LeftMotor = CALIB_FWD and RightMotor = CALIB_FWD)) and ((LeftMotor = CALIB_FWD and RightMotor = CALIB_FWD) => (pre(spec_turnState = T3) and spec_turnState = T0)));

  --environment - assumptions
  assert ((true -> pre(spec_nextMoveMode = snMM_FWD)) and pre(Obstacle = BLOCKED)) => Obstacle = BLOCKED;
  assert ((true -> pre(spec_nextMoveMode = snMM_BWD)) and pre(Obstacle = CLEAR)) => Obstacle <> BLOCKED;
  assert respondsTo((spec_turnState = T1), (pre(Obstacle = CLEAR) and (Obstacle = CLEAR)));
  assert (pre(spec_nextMoveMode = snMM_FWD or spec_nextMoveMode = snMM_BWD)) => Heading = pre(Heading);
  assert respondsTo((spec_nextMoveMode = snMM_TURN_LEFT), (Heading = spec_nextHead or spec_nextMoveMode <> snMM_TURN_LEFT));

  ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30;

  --%PROPERTY ok;
  --%REALIZABLE Obstacle, Noise, Heading, Button;
tel;
