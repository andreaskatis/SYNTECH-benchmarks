const K = 2;
type env_Obstacle = enum {CLEAR, BLOCKED};
type env_BtInput = enum {BI_FWD, BI_BWD, BI_TURN_LEFT, BI_TURN_RIGHT, NOT_CON};
type sys_LeftMotor = enum {FWD, BWD, STOP, TURN_FWD, TURN_BWD, CALIB_TURN_LEFT, CALIB_TURN_RIGHT, CALIB_FWD_LEFT, CALIB_FWD_RIGHT};

--enums cant share same values
--type sys_RightMotor = enum {RM_FWD, RM_BWD, RM_STOP, RM_TURN_FWD, RM_TURN_BWD, RM_CALIB_TURN, RM_CALIB_FWD};

type sys_HeadMotor = enum {HM_FWD, HM_BWD, HM_STOP};
type sys_nextMoveMode = enum {nMM_FWD, nMM_BWD, nMM_TURN_LEFT, nMM_TURN_RIGHT};
type sys_specState = enum {Q0, Q1, Q2, Q3};
type sys_turnState = enum {T0, T1, T2, T3};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : int;
let
  counter_gf = 0 -> if responded then 0 else pre(counter_gf) + 1;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Humanoid(Obstacle : env_Obstacle; BtInput : env_BtInput; LeftMotor : sys_LeftMotor; RightMotor : sys_LeftMotor; HeadMotor : sys_HeadMotor; nextMoveMode : sys_nextMoveMode; specState : sys_specState; turnState : sys_turnState) returns (ok : bool);
var
  counter_gf1 : int;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20, ok21, ok22, ok23, ok24, ok25, ok26, ok27, ok28, ok29, ok30 : bool;
let

  --inital state
  ok1 = Initially(specState = Q0);
  ok2 = Initially(turnState = T0);
  ok3 = Initially(nextMoveMode = nMM_FWD);

  assert Initially(Obstacle = CLEAR);

  --goals
  counter_gf1 = 0 -> if (nextMoveMode = nMM_FWD) then 0 else pre(counter_gf1) + 1;
  ok4 = counter_gf1 < K;

  --main restriction - do not run into walls
  ok5 = (Obstacle = BLOCKED) => (not (nextMoveMode = nMM_FWD));


  -- motors - control
  ok6 = (((pre(nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD) => (LeftMotor = FWD and RightMotor = BWD)) and ((LeftMotor = FWD and RightMotor = BWD) => (pre(nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD)));

  ok7 = ((pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => (LeftMotor = BWD and RightMotor = FWD)) and ((LeftMotor = BWD and RightMotor = FWD) => (pre(nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD));

  ok8 = (nextMoveMode = nMM_BWD => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_BWD)));
  ok9 = (pre(nextMoveMode = nMM_BWD) => (nextMoveMode = nMM_FWD or nextMoveMode = nMM_BWD));

  ok10 = (nextMoveMode = nMM_TURN_RIGHT) => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_TURN_RIGHT));
  ok11 = (nextMoveMode = nMM_TURN_LEFT) => (pre(nextMoveMode = nMM_FWD or nextMoveMode = nMM_TURN_LEFT));

  --q - automaton
  ok12 = (pre(specState = Q0 and nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD) => specState = Q1;
  ok13 = (pre(specState = Q1 and nextMoveMode = nMM_BWD) and nextMoveMode = nMM_FWD) => specState = Q2;
  ok14 = (not (pre(specState = Q2 and nextMoveMode = nMM_FWD) and nextMoveMode = nMM_BWD));
  ok15 = (pre(specState = Q1) and nextMoveMode = nMM_BWD) => specState = Q1;
  ok16 = (pre(specState = Q2) and nextMoveMode = nMM_FWD) => specState = Q2;
  ok17 = (pre(nextMoveMode = nMM_TURN_LEFT or nextMoveMode = nMM_TURN_RIGHT) => specState = Q0);

  --turning - automaton
  ok18 = (turnState = T0 => pre(turnState = T0 or turnState = T3));
  ok19 = (pre(turnState = T0 and (not (nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT))) => turnState = T0);
  ok20 = (pre((nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT) and (true -> pre(nextMoveMode = nMM_FWD)) and turnState = T0) => turnState = T1);
  ok21 = (pre(turnState = T1) => (turnState = T2 and pre(nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT)));
  ok22 = (pre(turnState = T2 and (nextMoveMode = nMM_TURN_RIGHT or nextMoveMode = nMM_TURN_LEFT)) => turnState = T1);
  ok23 = (pre(turnState = T2 and nextMoveMode = nMM_FWD) => turnState = T3);
  ok24 = (pre(turnState = T3) => turnState = T0);


  --movement - turning
  ok25 = ((pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_RIGHT)) => (LeftMotor = CALIB_TURN_RIGHT and RightMotor = CALIB_TURN_RIGHT)) and ((LeftMotor = CALIB_TURN_RIGHT and RightMotor = CALIB_TURN_RIGHT) => (pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_RIGHT)));

  ok26 = ((pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_LEFT)) => (LeftMotor = CALIB_TURN_LEFT and RightMotor = CALIB_TURN_LEFT)) and ((LeftMotor = CALIB_TURN_LEFT and RightMotor = CALIB_TURN_LEFT) => (pre(turnState = T0) and turnState = T1 and pre(nextMoveMode = nMM_TURN_LEFT)));

  ok27 = ((turnState = T2) => pre(LeftMotor = FWD and RightMotor = TURN_FWD)) and (pre(LeftMotor = FWD and RightMotor = TURN_FWD) => (turnState = T2));

  ok28 = ((turnState = T2) => (LeftMotor = BWD and RightMotor = TURN_BWD)) and ((LeftMotor = BWD and RightMotor = TURN_BWD) => (turnState = T2));

  ok29 = (((pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_RIGHT)))) => pre(LeftMotor = CALIB_FWD_RIGHT and RightMotor = CALIB_FWD_RIGHT)) and (pre(LeftMotor = CALIB_FWD_RIGHT and RightMotor = CALIB_FWD_RIGHT) => (pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_RIGHT))))));

  ok30 = (((pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_LEFT)))) => pre(LeftMotor = CALIB_FWD_LEFT and RightMotor = CALIB_FWD_LEFT)) and (pre(LeftMotor = CALIB_FWD_LEFT and RightMotor = CALIB_FWD_LEFT) => (pre(turnState = T3) and turnState = T0 and pre(true -> pre(true -> pre(nextMoveMode = nMM_TURN_LEFT))))));


  --environment - assumptions
  assert ((true -> pre(nextMoveMode = nMM_FWD)) and pre(Obstacle = BLOCKED)) => Obstacle = BLOCKED;
  assert ((true -> pre(nextMoveMode = nMM_BWD)) and pre(Obstacle = CLEAR)) => Obstacle <> BLOCKED;
  assert respondsTo((turnState = T1), (pre(Obstacle = CLEAR) and (Obstacle = CLEAR)));
  assert pre(turnState = T2 and Obstacle = CLEAR) => Obstacle = CLEAR;


  ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19 and ok20 and ok21 and ok22 and ok23 and ok24 and ok25 and ok26 and ok27 and ok28 and ok29 and ok30;

  --%PROPERTY ok;
  --%REALIZABLE Obstacle, BtInput;
tel;
