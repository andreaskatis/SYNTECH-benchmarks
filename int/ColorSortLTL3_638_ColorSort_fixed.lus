const K = 2;

type env_color = enum {RED, GREEN, BLUE, BLACK, YELLOW, WHITE};
type env_ack_ver = enum {MOVE, SLEEP};

type env_speedButton = enum {PRESS, RELEASE};

type sys_botMot = enum {SEEK, STOP, RETURN};
type sys_motSpeed = enum {LEVEL1, LEVEL2, LEVEL3};
type sys_spec_state = enum {S0, S1, S2};

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : int;
let
  counter_gf = 0 -> if responded then 0 else pre(counter_gf) + 1;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node ColorSort(color : env_color; detect : env_color; ack_ver, ack_hor, ack_bot : env_ack_ver; speedButton : env_speedButton; verMot, horMot : env_ack_ver; botMot : sys_botMot; motSpeed : sys_motSpeed; spec_currentColor : env_color; spec_state_1, spec_state_2 : sys_spec_state; spec_speedButtonValidPressed : bool) returns (ok : bool);
var
  counter_gf1, counter_gf2 : int;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15 : bool;
  spec_allsleep, spec_nonemove : bool;
let
  spec_allsleep = (verMot = SLEEP and horMot = SLEEP and botMot = STOP);
  spec_nonemove = (ack_ver = SLEEP and ack_hor = SLEEP and ack_bot = SLEEP);

  ok1 = verMot = MOVE => (botMot = STOP and horMot = SLEEP);
  ok2 = horMot = MOVE => (botMot = STOP and verMot = SLEEP);
  ok3 = botMot <> STOP => (verMot = SLEEP and horMot = SLEEP);
  ok4 = pre(verMot = SLEEP) => (spec_currentColor = pre(spec_currentColor));

  ok5 = Initially(motSpeed = LEVEL1);

  -- this is how the robot works

  -- this did not have a pre or next operation at all. Probably a mistake in the spectra file.
  ok6 = pre(color = BLACK and spec_nonemove and spec_allsleep) => spec_allsleep;

  --speed button

  ok7 = ((speedButton = PRESS and pre(speedButton = RELEASE)) => spec_speedButtonValidPressed) and (spec_speedButtonValidPressed => (speedButton = PRESS and pre(speedButton = RELEASE)));

  ok8 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL2;

  ok9 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL2)) => motSpeed = LEVEL3;

  ok10 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL3)) => motSpeed = LEVEL1;

  ok11 = ((not spec_speedButtonValidPressed) and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL1;

  ok12 = ((not spec_speedButtonValidPressed and pre(motSpeed = LEVEL2))) => motSpeed = LEVEL2;

  ok13 = ((not spec_speedButtonValidPressed and pre(motSpeed = LEVEL3))) => motSpeed = LEVEL3;

  ok14 = respondsTo((color <> BLACK), (detect = spec_currentColor and horMot = MOVE));

  counter_gf1 = 0 -> if (horMot = MOVE) then 0 else pre(counter_gf1) + 1;
  ok15 = counter_gf1 < K;

  assert respondsTo(ack_ver = MOVE, (ack_ver = SLEEP));
  assert respondsTo(ack_hor = MOVE, (ack_hor = SLEEP));
  assert respondsTo(ack_bot = MOVE, (ack_bot = SLEEP));

  counter_gf2 = 0 -> if (color <> BLACK) then 0 else pre(counter_gf2) + 1;

  assert counter_gf2 < K;

  ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15;

  --%PROPERTY ok;
  --%REALIZABLE color, detect, ack_ver, ack_hor, ack_bot, speedButton;
tel;
