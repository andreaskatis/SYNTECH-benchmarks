const K = 3;
type env_frontDistSense = enum {CLEAR, BLOCKED};
type env_backDistSense = enum {bDS_CLEAR, bDS_BLOCKED};
type env_bluetoothCmd = enum {AUTO, bC_STP, bC_FWD, bC_BWD, bC_TURN_LEFT, bC_TURN_RIGHT};
type sys_balancer = enum {STP, FWD, BWD, TURN_LEFT, TURN_RIGHT};
type sys_spec_blockedState = enum {S0, S1, S2};


node Initially(i: bool) returns (o: bool);
let
  o = i => true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : int;
let
  counter_gf = 0 -> if responded then 0 else pre(counter_gf) + 1;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node GyroAspect(frontDistSense : env_frontDistSense; backDistSense: env_backDistSense; isReady : bool; bluetoothCmd : env_bluetoothCmd; balancer : sys_balancer; spec_blockedState : sys_spec_blockedState) returns (ok : bool);
var
  counter_gf1, counter_gf2, counter_gf3 : int;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13 : bool;
  moveAwayFromFrontObstacle, moveAwayFromBackObstacle, turningOp : bool;
let

  ok1 = Initially(balancer = STP);
  ok2 = (not isReady) => balancer = STP;
  ok3 = (balancer = FWD) => (frontDistSense = CLEAR);
  ok4 = (balancer = BWD) => (backDistSense = bDS_CLEAR);

  counter_gf1 = 0 -> if (bluetoothCmd = AUTO => (balancer = FWD)) then 0 else pre(counter_gf1) + 1;
  ok5 = counter_gf1 < K;

  turningOp = (balancer = TURN_RIGHT or balancer = TURN_LEFT);
  ok6 = Initially(spec_blockedState = S0);

  ok7 = pre(bluetoothCmd = AUTO and isReady) => ((pre(spec_blockedState = S0 and (((not (frontDistSense = BLOCKED)) and (not (frontDistSense = CLEAR))) or (frontDistSense = CLEAR))) and (spec_blockedState = S0)) or

  (pre(spec_blockedState = S0 and (frontDistSense = BLOCKED and (not turningOp) and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S1)) or

  (pre(spec_blockedState = S0 and (frontDistSense = BLOCKED and turningOp and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S2)) or

  (pre(spec_blockedState = S1) and (spec_blockedState = S1)) or
  (pre(spec_blockedState = S2 and (frontDistSense = CLEAR)) and (spec_blockedState = S0)) or
  (pre(spec_blockedState = S2 and ((not turningOp) and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S1)) or
  (pre(spec_blockedState = S2 and (turningOp and (not (frontDistSense = CLEAR)))) and (spec_blockedState = S2)));

  counter_gf2 = 0 -> if ((bluetoothCmd = AUTO) => (spec_blockedState = S0 or spec_blockedState = S2)) then 0 else pre(counter_gf2) + 1;
  ok8 = counter_gf2 < K;

  ok9 = (bluetoothCmd = bC_FWD) => ((frontDistSense = CLEAR and isReady) => (balancer = FWD));
  ok10 = (bluetoothCmd = bC_BWD) => ((backDistSense = bDS_CLEAR and isReady) => (balancer = BWD));
  ok11 = (bluetoothCmd = bC_TURN_RIGHT) => (isReady => (balancer = TURN_RIGHT));
  ok12 = (bluetoothCmd = bC_TURN_LEFT) => (isReady => (balancer = TURN_LEFT));
  ok13 = (bluetoothCmd = bC_STP or (bluetoothCmd = bC_FWD and frontDistSense = BLOCKED) or (bluetoothCmd = bC_BWD and backDistSense = bDS_BLOCKED)) => (isReady => (balancer = STP));

  assert Initially(not isReady);
  assert Initially(bluetoothCmd = AUTO);
  assert Initially(frontDistSense = CLEAR and backDistSense = bDS_CLEAR);
  counter_gf3 = 0 -> if isReady then 0 else pre(counter_gf3) + 1;
  assert counter_gf3 < K;
  assert true -> (pre(isReady) => isReady);

  moveAwayFromFrontObstacle = not(balancer = FWD or balancer = STP);

  assert respondsTo(moveAwayFromFrontObstacle, ((not moveAwayFromFrontObstacle) or (frontDistSense = CLEAR)));

  moveAwayFromBackObstacle = not (balancer = BWD or balancer = STP);

  assert respondsTo(moveAwayFromBackObstacle, ((not moveAwayFromBackObstacle) or backDistSense = bDS_CLEAR));

  assert respondsTo((balancer = FWD), ((not (balancer = FWD)) or (frontDistSense = BLOCKED)));

  assert respondsTo((balancer = BWD), ((not (balancer = BWD)) or (backDistSense = bDS_BLOCKED)));

  ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13;

  --%PROPERTY ok;
  --%REALIZABLE frontDistSense, backDistSense, isReady, bluetoothCmd;
tel;
