-- aeval seg fault
const K = 2.0;

type env_color = enum {RED, GREEN, BLUE, BLACK, YELLOW, WHITE};
type env_ack_ver = enum {MOVE, SLEEP};

type env_speedButton = enum {PRESS, RELEASE};

type sys_botMot = enum {SEEK, STOP, RETURN};
type sys_motSpeed = enum {LEVEL1, LEVEL2, LEVEL3};
type sys_spec_state__return = enum {S0, S1, S2};

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node ColorSort(color : env_color; detect : env_color; ack_ver, ack_hor, ack_bot : env_ack_ver; speedButton : env_speedButton; verMot, horMot : env_ack_ver; botMot : sys_botMot; motSpeed : sys_motSpeed; spec_state__return : sys_spec_state__return; spec_currentColor : env_color; spec_dropping : bool; spec_speedButtonValidPressed : bool) returns ();
var
  counter_gf1 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18, ok19, ok20 : bool;
  allsleep, nonemove, onlybotmoves : bool;
let
  allsleep = (verMot = SLEEP and horMot = SLEEP and botMot = STOP);
  nonemove = (ack_ver = SLEEP and ack_hor = SLEEP and ack_bot = SLEEP);
  onlybotmoves = ack_ver = SLEEP and ack_hor = SLEEP and ack_bot = MOVE;


  ok1 = verMot = MOVE => (botMot = STOP and horMot = SLEEP);
  ok2 = horMot = MOVE => (botMot = STOP and verMot = SLEEP);
  ok3 = botMot <> STOP => (verMot = SLEEP and horMot = SLEEP);
  ok4 = pre(verMot = SLEEP) => (spec_currentColor = pre(spec_currentColor));


  ok5 = ((spec_dropping = pre(spec_dropping)) => (pre(verMot = SLEEP)));

  ok6 = ((pre(verMot = SLEEP)) => (spec_dropping = pre(spec_dropping)));

  ok7 = (ack_ver = MOVE or ack_hor = MOVE) => allsleep;

  assert (not spec_dropping) => nonemove;

  --running the robot

  ok8 = (color = BLACK and (not spec_dropping)) => allsleep;

  ok9 = pre(color <> BLACK and (not spec_dropping)) => (pre(verMot = MOVE) and (spec_currentColor = pre(color)) and spec_dropping);

  ok10 = ((nonemove and spec_dropping) or (pre(botMot = SEEK) and onlybotmoves and detect <> spec_currentColor)) => botMot = SEEK;

  ok11 = (spec_dropping and onlybotmoves and detect = spec_currentColor and pre(botMot = SEEK)) => horMot = MOVE;

  --speed button

  --ok12 = true;
  ok12 = (motSpeed = LEVEL1 and (not spec_dropping)) -> true;

  --ok12 = Initially(motSpeed = LEVEL1 and (not spec_dropping));

  ok13 = ((speedButton = PRESS and pre(speedButton = RELEASE)) => spec_speedButtonValidPressed);
  ok14 = (spec_speedButtonValidPressed => (speedButton = PRESS and pre(speedButton = RELEASE)));

  ok15 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL2;

  ok16 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL2)) => motSpeed = LEVEL3;

  ok17 = (spec_speedButtonValidPressed and pre(motSpeed = LEVEL3)) => motSpeed = LEVEL1;

  ok18 = ((not spec_speedButtonValidPressed) and pre(motSpeed = LEVEL1)) => motSpeed = LEVEL1;

  ok19 = ((not spec_speedButtonValidPressed and pre(motSpeed = LEVEL2))) => motSpeed = LEVEL2;

  ok20 = ((not spec_speedButtonValidPressed and pre(motSpeed = LEVEL3))) => motSpeed = LEVEL3;

  counter_gf1 = 0.0 -> if (color <> BLACK) then 0.0 else pre(counter_gf1) + 1.0;
  assert counter_gf1 < K;

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --%PROPERTY ok16;
  --%PROPERTY ok17;
  --%PROPERTY ok18;
  --%PROPERTY ok19;
  --%PROPERTY ok20;

  --%REALIZABLE color, detect, ack_ver, ack_hor, ack_bot, speedButton;
tel;
