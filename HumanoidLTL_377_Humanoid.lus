const K = 10.0;
type env_Obstacle = enum {CLEAR, BLOCKED};
type env_InputMoveMode = enum {FWD, TURN, BWD};
type sys_LeftMotor = enum {LM_FWD, LM_BWD, LM_STOP};
type sys_RightMotor = enum {RM_FWD, RM_BWD, RM_STOP};
type sys_HeadMotor = enum {HM_FWD, HM_BWD, HM_STOP};
type sys_OutputMoveMode = enum {OMM_FWD, OMM_TURN, OMM_BWD};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node Humanoid(Obstacle : env_Obstacle; InputMoveMode : env_InputMoveMode; LeftMotor : sys_LeftMotor; RightMotor : sys_RightMotor; HeadMotor : sys_HeadMotor; OutputMoveMode : sys_OutputMoveMode) returns ();
var
  ok1, ok2, ok3, ok4 : bool;
let
  ok1 = (InputMoveMode = FWD and Obstacle = BLOCKED) => (OutputMoveMode = OMM_BWD and LeftMotor = LM_BWD and RightMotor = RM_FWD);
  ok2 = (InputMoveMode = BWD and Obstacle = CLEAR) => (OutputMoveMode = OMM_FWD and LeftMotor = LM_FWD and RightMotor = RM_BWD);
  ok3 = (InputMoveMode = FWD and Obstacle = CLEAR) => (LeftMotor = LM_FWD and RightMotor = RM_FWD);
  ok4 = (Obstacle = BLOCKED) => (OutputMoveMode = OMM_BWD);

  assert respondsTo((OutputMoveMode = OMM_BWD), (Obstacle = CLEAR));

  --ok = ok1 and ok2 and ok3 and ok4;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;

  --%REALIZABLE Obstacle, InputMoveMode;
tel;
