const K = 2.0;
type env_distSense = enum {CLEAR, BLOCKED};
type sys_balancer = enum {STP, FWD, BWD, TURN_LEFT, TURN_RIGHT};

node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node respondsTo(trigger, response : bool) returns ();
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;

node GyroAspect(distSense : env_distSense; isReady : bool; balancer : sys_balancer) returns (ok : bool);
var
  counter_gf1, counter_gf2 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7 : bool;
let

  counter_gf1 = 0.0 -> if (balancer = FWD) then 0.0 else pre(counter_gf1) + 1.0;
  counter_gf2 = 0.0 -> if isReady then 0.0 else pre(counter_gf2) + 1.0;

  assert counter_gf2 < K;
  assert Initially(not isReady);
  assert true -> (pre(isReady) => isReady);
  assert respondsTo((not (balancer = FWD or balancer = STP)), (distSense = CLEAR));

  ok7 = Initially(balancer = STP);

  ok1 = (not isReady) => balancer = STP;
  ok2 = (distSense = BLOCKED and isReady) => (not (balancer = FWD));
  ok3 = counter_gf1 < K;
  ok4 = (distSense = CLEAR and isReady) => (balancer = FWD);
  ok5 = true -> ((pre(balancer) = FWD) => (not (balancer = TURN_RIGHT or balancer = TURN_LEFT)));
  ok6 = true -> ((pre(distSense = BLOCKED and balancer = STP and isReady)) => (not (balancer = STP)));


  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;

  --%REALIZABLE distSense, isReady;
tel;
