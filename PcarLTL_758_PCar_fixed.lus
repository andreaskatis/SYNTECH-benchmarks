--appended prefix "IS_" to values CLEAR and BLOCKED in sideSense since JKind complains of value being used in multiple types

const K = 2.0;
type env_obstacle = enum {CLEAR, BLOCKED};
type env_sideSense = enum {IS_CLEAR, P_O, IS_BLOCKED};
type env_parkResult = enum {NA, PARALLEL};

type sys_throttle = enum {FWD, BWD, STOP};
type sys_steer = enum {RIGHT, LEFT, CENTER};
type sys_parkCommand = enum {pSTART, pSTOP, pCHECK};
type sys_spec_policy = enum {SEEKING, MEASURING, PARKING_0, PARKING_1, PARKING_2, PARKED};


node respondsTo(trigger, response : bool) returns (ok : bool);
var
  responded : bool;
  counter_gf : real;
let
  counter_gf = 0.0 -> if responded then 0.0 else pre(counter_gf) + 1.0;
  responded = true -> if pre(response or responded and (not trigger)) then true else false;
  ok = true -> ((responded => pre(response or responded and (not trigger))) and (pre(response or responded and (not trigger)) => responded) and counter_gf < K);
tel;


node Initially(i: bool) returns (o: bool);
let
  o = i -> true;
tel;

node PCar(obstacle : env_obstacle; sideSense : env_sideSense; parkResult : env_parkResult; throttle : sys_throttle; steer : sys_steer; parkCommand : sys_parkCommand; spec_park : bool; spec_policy : sys_spec_policy) returns ();
var
  counter_gf1 : real;
  ok1, ok2, ok3, ok4, ok5, ok6, ok7, ok8, ok9, ok10, ok11, ok12, ok13, ok14, ok15, ok16, ok17, ok18 : bool;
let

  ok1 = Initially(spec_policy = SEEKING or (spec_policy = MEASURING and parkCommand = pSTART));

  counter_gf1 = 0.0 -> if (spec_policy = PARKED) then 0.0 else pre(counter_gf1) + 1.0;
  ok2 = counter_gf1 < K;
  ok3 = ((spec_policy = SEEKING or spec_policy = MEASURING) and obstacle = BLOCKED) => throttle = BWD;
  ok4 = (obstacle = BLOCKED) => (not (throttle = FWD));
  ok5 = sideSense = IS_BLOCKED => (not (steer = RIGHT and throttle = FWD));
  ok6 = pre(spec_policy = SEEKING and sideSense = IS_BLOCKED) => (spec_policy = pre(spec_policy));

  ok7 = pre(spec_policy = SEEKING and (sideSense = IS_CLEAR or sideSense = P_O) and obstacle = CLEAR) => (spec_policy = MEASURING and pre(throttle = FWD and parkCommand = pSTART and steer = CENTER));

  ok8 = pre(spec_policy = MEASURING and (sideSense = IS_CLEAR or sideSense = P_O) and obstacle = CLEAR and parkResult = NA) => ((spec_policy = pre(spec_policy)) and pre(throttle = FWD and parkCommand = pCHECK and steer = CENTER));

  ok9 = pre(spec_policy = MEASURING and (sideSense = IS_CLEAR or sideSense = P_O) and obstacle = CLEAR and parkResult = PARALLEL) => ((spec_policy = PARKING_0) and pre(throttle = STOP and parkCommand = pSTOP and steer = RIGHT));

  ok10 = pre(spec_policy = MEASURING and sideSense = IS_BLOCKED and obstacle = CLEAR and parkResult = PARALLEL) => (spec_policy = PARKING_0 and pre(throttle = STOP and parkCommand = pSTOP and steer = RIGHT));

  ok11 = pre(spec_policy = MEASURING and sideSense = IS_BLOCKED and obstacle = CLEAR and parkResult = NA) => (spec_policy = SEEKING and pre(throttle = FWD and parkCommand = pSTOP));

  ok12 = pre(spec_policy = PARKING_0) => (spec_policy = PARKING_1 and pre(throttle = BWD and steer = RIGHT and parkCommand = pSTOP));
  ok13 = pre(spec_policy = PARKING_1) => (spec_policy = PARKING_2 and pre(throttle = STOP and steer = LEFT and parkCommand = pSTOP));
  ok14 = pre(spec_policy = PARKING_2) => (spec_policy = PARKED and pre(throttle = BWD and steer = LEFT and parkCommand = pSTOP));
  ok15 = pre(spec_policy = PARKED) => ((spec_policy = pre(spec_policy)) and pre(throttle = STOP and steer = CENTER and parkCommand = pSTOP));

  ok16 = pre(obstacle = BLOCKED and (not (spec_policy = PARKING_0 or spec_policy = PARKING_1 or spec_policy = PARKING_2 or spec_policy = PARKED))) => spec_policy = SEEKING;
  ok17 = obstacle = BLOCKED => parkCommand = pSTOP;
  ok18 = spec_policy = SEEKING => (throttle <> STOP);

  assert respondsTo((throttle = BWD), (obstacle = CLEAR));
  assert pre(throttle = STOP) => ((pre(obstacle) = obstacle) and (pre(sideSense) = sideSense));
  assert respondsTo((spec_policy = SEEKING and throttle = FWD), (spec_policy = PARKING_0));
  assert Initially(parkResult = NA);

  --ok = ok1 and ok2 and ok3 and ok4 and ok5 and ok6 and ok7 and ok8 and ok9 and ok10 and ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18;
  --ok = ok1 and ok2 and ok3 and ok4 and ok5;
  --ok = ok6 and ok7 and ok8 and ok9 and ok10;
  --ok = ok11 and ok12 and ok13 and ok14 and ok15 and ok16 and ok17 and ok18 and ok19;

  --%PROPERTY ok1;
  --%PROPERTY ok2;
  --%PROPERTY ok3;
  --%PROPERTY ok4;
  --%PROPERTY ok5;
  --%PROPERTY ok6;
  --%PROPERTY ok7;
  --%PROPERTY ok8;
  --%PROPERTY ok9;
  --%PROPERTY ok10;
  --%PROPERTY ok11;
  --%PROPERTY ok12;
  --%PROPERTY ok13;
  --%PROPERTY ok14;
  --%PROPERTY ok15;
  --PROPERTY ok16;
  --PROPERTY ok17;
  --PROPERTY ok18;

  --%REALIZABLE obstacle, sideSense, parkResult;
tel;
